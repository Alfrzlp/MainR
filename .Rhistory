print(right)
return(list(as.list(left), as.list(right)))
}
1 ? 1*2 : 3
a
b
1+ 3- 5 * 5 / 2 + 12 * 9 : 1
saguling <- readxl::read_xlsx("D:/Downloads/Copy of [RISET 2] KBB_Saguling.xlsx")
saguling <- saguling %>%
dplyr::filter(desa %in% c('002', '004', '006')) %>%
mutate(
desa = case_when(
desa == '006'~'Saguling',
desa == '004'~'Cipangeran',
desa == '002'~'Cikande',
)
)
saguling
library(geojsonio)
geojson_read('D:/Downloads/pointsg.geojson')
geojson_read('D:/Downloads/pointsg.geojson', what = 'sp')
saguling <- geojson_read('D:/Downloads/pointsg.geojson', what = 'sp')
saguling
saguling <- geojson_read('D:/Downloads/pointsg.geojson',
what = 'sf', stringsAsFactors = F)
saguling <- geojson_read('D:/Downloads/pointsg.geojson',
what = 'sp', stringsAsFactors = F)
saguling
saguling %>%
glimpse()
saguling <- readxl::read_xlsx("D:/Downloads/Copy of [RISET 2] KBB_Saguling.xlsx")
saguling
read.csv('D:/Downloads/pointsg.csv') %>%
janitor::clean_names() %>%
rename(desa = kec_sagul)
dplyr::filter(id %in% c(31, 54, 55, 65, 71, 28, 8, 18)) %>%
# dplyr::filter(desa %in% c('2', '4', '6')) %>%
# mutate(
#   desa = case_when(
#     desa == '6'~'Saguling',
#     desa == '4'~'Cipangeran',
#     desa == '2'~'Cikande',
#   )
# ) %>%
extract(wkt, into = c('long', 'lat'),
regex = 'POINT \\((-?\\d*?\\.\\d*|-?\\d+) (-?\\d*?\\.\\d*|-?\\d+)\\)') %>%
write.csv('D:/Downloads/point_sg.csv', row.names = F)
dplyr::filter(id %in% c(31, 54, 55, 65, 71, 28, 8, 18)) %>%
# dplyr::filter(desa %in% c('2', '4', '6')) %>%
# mutate(
#   desa = case_when(
#     desa == '6'~'Saguling',
#     desa == '4'~'Cipangeran',
#     desa == '2'~'Cikande',
#   )
# ) %>%
extract(wkt, into = c('long', 'lat'),
regex = 'POINT \\((-?\\d*?\\.\\d*|-?\\d+) (-?\\d*?\\.\\d*|-?\\d+)\\)')
dplyr::filter(id %in% c(31, 54, 55, 65, 71, 28, 8, 18))
read.csv('D:/Downloads/pointsg.csv') %>%
janitor::clean_names() %>%
rename(desa = kec_sagul) %>%
dplyr::filter(id %in% c(31, 54, 55, 65, 71, 28, 8, 18)) %>%
# dplyr::filter(desa %in% c('2', '4', '6')) %>%
# mutate(
#   desa = case_when(
#     desa == '6'~'Saguling',
#     desa == '4'~'Cipangeran',
#     desa == '2'~'Cikande',
#   )
# ) %>%
extract(wkt, into = c('long', 'lat'),
regex = 'POINT \\((-?\\d*?\\.\\d*|-?\\d+) (-?\\d*?\\.\\d*|-?\\d+)\\)')
read.csv('D:/Downloads/pointsg.csv') %>%
janitor::clean_names() %>%
rename(desa = kec_sagul) %>%
dplyr::filter(id %in% c(31, 54, 55, 65, 71, 28, 8, 18)) %>%
# dplyr::filter(desa %in% c('2', '4', '6')) %>%
# mutate(
#   desa = case_when(
#     desa == '6'~'Saguling',
#     desa == '4'~'Cipangeran',
#     desa == '2'~'Cikande',
#   )
# ) %>%
extract(wkt, into = c('long', 'lat'),
regex = 'POINT \\((-?\\d*?\\.\\d*|-?\\d+) (-?\\d*?\\.\\d*|-?\\d+)\\)') %>%
write.csv('D:/Downloads/point_desa_sg.csv', row.names = F)
longitude <- c(107.3923891, 107.39214637)
latitude <- c(-6.8976564, -6.89781698)
library(sp)
lonlat <- cbind(longitude, latitude)
pts <- SpatialPoints(lonlat)
class(pts)
showDefault(pts)
pts <- SpatialPoints(lonlat, proj4string = CRS('+proj=longlat +datum=WGS84'))
pta
pts
plot(pts)
class(pts)
library(rgdal)
writeOGR(pts, "E:/pointku.geojson", layer="pointku", driver="GeoJSON")
df <- data.frame(id=1:nrow(lonlat))
df
ptsdf <- SpatialPointsDataFrame(pts, data=df)
library(rgdal)
writeOGR(ptsdf, "E:/pointku.geojson", layer="pointku", driver="GeoJSON")
library(sp)
s <- 'Latifah -6.907092514447868 107.37399104051292
Suryani -6.907630506902933 107.368298554793
Nunung -6.908078477717936 107.36863919533789
Sari -6.902362857945263 107.36663273535669
Arif -6.889751614071429 107.37094941549003
Atika -6.88825502526015 107.3754945024848
Didin -6.888189939782023 107.37574193626642'
read.table(textConnection(s), header = F)
read.table(textConnection(s), header = F) %>%
`colnames<-`(c('nama', 'long', 'lat'))
dat <-
read.table(textConnection(s), header = F) %>%
`colnames<-`(c('nama', 'long', 'lat'))
dat
pts <- SpatialPoints(dat[,-1])
class(pts)
showDefault(pts)
pts <- SpatialPoints(lonlat, proj4string = CRS('+proj=longlat +datum=WGS84'))
pts
plot(pts)
class(pts)
ptsdf <- SpatialPointsDataFrame(pts, data=dat[,1])
dat
dat[,1]
df <- data.frame(nama = dat$nama)
df
ptsdf <- SpatialPointsDataFrame(pts, data=dat[,1])
ptsdf <- SpatialPointsDataFrame(pts, data=df)
library(rgdal)
longlat.scales()
longlat
pts
df <- data.frame(nama = dat$nama)
df
ptsdf <- SpatialPointsDataFrame(pts, data=df)
dat <-
read.table(textConnection(s), header = F) %>%
`colnames<-`(c('nama', 'long', 'lat'))
dat
pts <- SpatialPoints(dat[,-1])
class(pts)
showDefault(pts)
pts <- SpatialPoints(lonlat, proj4string = CRS('+proj=longlat +datum=WGS84'))
pts
plot(pts)
class(pts)
df <- data.frame(nama = dat$nama)
df
ptsdf <- SpatialPointsDataFrame(pts, data=df)
library(rgdal)
library(tidyverse)
matrix(c(2.2, 0.4, 0.4, 2.8))
matrix(c(2.2, 0.4, 0.4, 2.8), nrow = 2)
matrix(c(2.2, 0.4, 0.4, 2.8), nrow = 2, byrow = T)
matrix(c(2.2, 0.5, 0.4, 2.8), nrow = 2, byrow = T)
matrix(c(2.2, 0.4, 0.4, 2.8), nrow = 2, byrow = T)
matrix(c(2.2, 0.4, 0.4, 2.8), nrow = 2, byrow = T) %>%
eigen()
matrix(c(2.2, 0.4, 0.4, 2.8), nrow = 2, byrow = T) %>%
eigen(EISPACK = F)
matrix(c(2.2, 0.4, 0.4, 2.8), nrow = 2, byrow = T) %>%
eigen(EISPACK = T)
m <- matrix(c(2.2, 0.4, 0.4, 2.8), nrow = 2, byrow = T)
m %>% eigen()
solve(m, 2)
solve(m)
solve(m)*2
solve(m)/2
m %>% eigen()
hasil <- m %>% eigen()
hasil$vectors
solve(hasil$vectors)
hasil$vectors*solve(hasil$vectors)
solve(hasil$vectors)*hasil$vectors
matrix(c(-0.8, 0.4, 0.4, -0.2), nrow = 2, byrow = T)
matrix(c(-0.8, 0.4, 0.4, -0.2), nrow = 2, byrow = T) %>%
solve(matrix(c(0, 0), nrow = 2, byrow = T))
matrix(c(0, 0), nrow = 2, byrow = T)
matrix(c(-0.8, 0.4, 0.4, -0.2), nrow = 2, byrow = T) %>%
solve()
m
m*matrix(c(1, 2), nrow = 2, byrow = T)
m*matrix(c(1, 2), nrow = 1, byrow = T)
matrix(c(1, 2), nrow = 1, byrow = T)
m*matrix(c(1, 2), nrow = 1)
matrix(c(1, 2), nrow = 1)
m*matrix(c(1, 2), nrow = 2)
matrix(c(1, 2), nrow = 2)
m*matrix(c(1, 2), nrow = 2)
m%*%matrix(c(1, 2), nrow = 2)
m%*%matrix(c(0.5, 1), nrow = 2)
3*matrix(c(0.5, 1), nrow = 2)
e <- m %>% eigen()
solve(e$vectors)*e$vectors
m%*%matrix(c(0.5, 1), nrow = 2)
3*matrix(c(0.5, 1), nrow = 2)
(e <- m %>% eigen())
# dimana vector eigen telah dinormalisasi -> x/sqrt(x'x)
e$vectors
# dimana vector eigen telah dinormalisasi -> x/sqrt(x'x)
e$vectors
m
diag(m)
diag(m) - e$values
diag(m) <- diag(m) - e$values
m
m/sqrt(solve(m)*m)
# dimana vector eigen telah dinormalisasi -> x/sqrt(x'x)
e$vectors
m <- matrix(c(2.2, 0.4, 0.4, 2.8), nrow = 2, byrow = T)
x <- m
diag(x) <- e$values - diag(x)
x/sqrt(solve(x)*x)
# dimana vector eigen telah dinormalisasi -> x/sqrt(x'x)
e$vectors
x/sqrt(solve(x)%*%x)
solve(x)%*%x
x/sqrt(sum(solve(x)%*%x))
m <- matrix(c(2.2, 0.4, 0.4, 2.8), nrow = 2, byrow = T)
x <- m
diag(x) <- e$values - diag(x)
x/sqrt(sum(solve(x)%*%x))
x/sqrt(sum(t(x)%*%x))
x/sqrt((t(x)%*%x))
x/sqrt((t(x)*x))
x/sqrt(sum(t(x)*x))
# dimana vector eigen telah dinormalisasi -> x/sqrt(x'x)
e$vectors
x/sqrt(sum(t(x)*x))
1 - x/sqrt(sum(t(x)*x))
# dimana vector eigen telah dinormalisasi -> x/sqrt(x'x)
e$vectors
crossprod(x)
sum(t(x)*x)
1 - x/sqrt(crossprod(x))
x/sqrt(crossprod(x))
# dimana vector eigen telah dinormalisasi -> x/sqrt(x'x)
e$vectors
x <- m
diag(x) <- e$values - diag(x)
x
x[,1]
x <- x[,1]
x/sqrt(crossprod(x))
x <- x[,2]
x <- m
diag(x) <- e$values - diag(x)
x <- x[,2]
x/sqrt(crossprod(x))
# dimana vector eigen telah dinormalisasi -> x/sqrt(x'x)
e$vectors
x <- m
diag(x) <- diag(x) - e$values
x <- x[,2]
x/sqrt(crossprod(x))
# dimana vector eigen telah dinormalisasi -> x/sqrt(x'x)
e$vectors
x <- m
diag(x) <- diag(x) - e$values
x <- x[,1]
x/sqrt(crossprod(x))
# dimana vector eigen telah dinormalisasi -> x/sqrt(x'x)
e$vectors
angle <- function(){
acos(sum(x*y) / ( sqrt(sum(x^2)) * sqrt(sum(y^2)) ) )
}
x <- c(5, 1, 3)
y <- c(-1, 3, 1)
angle()
angle <- function(x, y){
acos(sum(x*y) / ( sqrt(sum(x^2)) * sqrt(sum(y^2)) ) )
}
x <- c(5, 1, 3)
y <- c(-1, 3, 1)
angle(x, y)
angle(x, y)
proj <- function(x, y) {
return(as.vector( (x %*% y) / (x %*% y) ) * y)
}
proj(x, y)
proj <- function(x, y) {
return(as.vector( (x %*% y) / (x %*% y) ) * y)
}
proj(x, y)
sum(y^2)
# bayangan vektor x ke vektor y
proj <- function(x, y) {
return(as.vector( (x*y) / (sum(y^2))^2 ) * y)
}
proj(x, y)
angle(x, y)
angle(x, y) %>% cos()
# bayangan vektor x ke vektor y
proj <- function(x, y) {
cat('Panjang Proyeksi  :', sum(x^2)*cos(angle(x, y)), '\n')
return(as.vector( (x*y) / (sum(y^2))^2 ) * y)
}
angle(x, y)
proj(x, y)
# -------------------------------------------------------------------------
x <- c(5, 1, 3)
y <- c(-1, 3, 1)
angle(x, y)
proj(x, y)
sum(x*y) / ( sqrt(sum(x^2)) * sqrt(sum(y^2)) )
acos(sum(x*y) / ( sqrt(sum(x^2)) * sqrt(sum(y^2)) ))
acos(sum(x*y) / ( sqrt(sum(x^2)) * sqrt(sum(y^2)) ))
acos(0.051)
# Catatan
# The trigonometric functions in R use radians, not degrees
# e.g. 360 degrees is 2pi radians.
deg2rad = function(deg) {
return((pi * deg) / 180)
}
rad2deg = function(rad) {
return((180 * rad) / pi)
}
pi
deg2rad(0.051)
acos(deg2rad(0.051))
acos(0.051)
acos(deg2rad(0.051)) %>% rad2deg()
acos(deg2rad(0.051)) %>% rad2deg()
usethis::use_tidy_style()
acos(0.051) %>% rad2deg()
angle <- function(x, y){
cos_theta <- sum(x*y) / ( sqrt(sum(x^2)) * sqrt(sum(y^2)) )
theta <- rad2deg(acos(cos_theta))
cat('Cos(theta)  :', cos_theta, '\n')
cat('Sudut       :', theta)
return(theta)
}
angle(x, y)
angle <- function(x, y){
cos_theta <- sum(x*y) / ( sqrt(sum(x^2)) * sqrt(sum(y^2)) )
theta <- rad2deg(acos(cos_theta))
cat('Cos(theta)  :', cos_theta, '\n')
cat('Sudut       :', theta, '\n')
return(invisible(theta))
}
angle(x, y)
angle <- function(x, y){
cos_theta <- sum(x*y) / ( sqrt(sum(x^2)) * sqrt(sum(y^2)) )
theta <- rad2deg(acos(cos_theta))
cat('Cos(theta)  :', cos_theta, '\n')
cat('Theta       :', theta, '\n')
return(invisible(theta))
}
angle(x, y)
t <- angle(x, y)
t
angle(x, y)
len <- function(x) sum(x^2)
angle <- function(x, y){
cos_theta <- sum(x*y) / ( sqrt(len(x)) * sqrt(len(y)) )
theta <- rad2deg(acos(cos_theta))
cat('Cos(theta)  :', cos_theta, '\n')
cat('Theta       :', theta, '\n')
return(invisible(theta))
}
# bayangan vektor x ke vektor y
proj <- function(x, y) {
cat('Panjang Proyeksi  :', len(x)*cos(angle(x, y)), '\n')
return(((x*y) / (len(y))^2 ) * y)
}
len <- function(x) sum(x^2)
# -------------------------------------------------------------------------
x <- c(5, 1, 3)
y <- c(-1, 3, 1)
angle(x, y)
cproj(x, y)
proj(x, y)
# bayangan vektor x ke vektor y
proj <- function(x, y) {
cat('Panjang Proyeksi  :', len(x)*invisible(cos(angle(x, y))), '\n')
return(((x*y) / (len(y))^2 ) * y)
}
proj(x, y)
len(x)
len(y)
angle <- function(x, y, show = T){
cos_theta <- sum(x*y) / ( sqrt(len(x)) * sqrt(len(y)) )
theta <- rad2deg(acos(cos_theta))
if(show){
cat('Cos(theta)  :', cos_theta, '\n')
cat('Theta       :', theta, '\n')
}
return(invisible(theta))
}
# bayangan vektor x ke vektor y
proj <- function(x, y) {
cat('Panjang Proyeksi  :', len(x)*cos(angle(x, y, F)), '\n')
return(((x*y) / (len(y))^2 ) * y)
}
len(x)
len(y)
angle(x, y)
proj(x, y)
x/35
}
proj(x, y)
x/35
}
}
proj(x, y)
x/35
# bayangan vektor x ke vektor y
proj <- function(x, y) {
cat('Panjang Proyeksi  :', len(x)*cos(angle(x, y, F)), '\n')
# proyeksi  y ke x
return((sum(x*y) / sum(x*x)) * x)
}
proj(x, y)
x/35
MASS::fractions(x/35)
MASS::fractions(1/3)
MASS::fractions(0.99)
MASS::fractions(x/35)
MASS::fractions(x/35) %>% class()
MASS::fractions(x/35)*30
MASS::fractions(x/35)/3
# bayangan vektor x ke vektor y
proj <- function(x, y) {
proj_vec <- (sum(x*y) / sum(x*x)) * x
cat('Panjang Proyeksi  :', len(x)*cos(angle(x, y, F)), '\n')
cat('Vektor Proyeksi  :', MASS::fractions(proj_vec), '\n')
# proyeksi  y ke x
return(invisible(proj_vec))
}
angle(x, y)
proj(x, y)
MASS::fractions(proj_vec)
MASS::fractions(x/35)
o
# bayangan vektor x ke vektor y
proj <- function(x, y) {
# proyeksi  y ke x
proj_vec <- (sum(x*y) / sum(x*x)) * x
cat('Panjang Proyeksi  :', len(x)*cos(angle(x, y, F)), '\n')
cat('Vektor Proyeksi  :', MASS::fractions(proj_vec), '\n')
return(invisible(proj_vec))
}
angle(x, y)
proj(x, y)
cat('Vektor Proyeksi  :', MASS::fractions(x/35), '\n')
paste('Vektor Proyeksi  :', MASS::fractions(x/35), '\n')
cat(fill = F, 'Vektor Proyeksi  :', MASS::fractions(x/35), '\n')
iter <- stats::rpois(1, lambda = 10)
## print an informative message
cat("iteration = ", iter <- iter + 1, "\n")
## 'fill' and label lines:
cat(paste(letters, 100* 1:26), fill = TRUE, labels = paste0("{", 1:10, "}:"))
# bayangan vektor x ke vektor y
proj <- function(x, y) {
# proyeksi  y ke x
proj_vec <- (sum(x*y) / sum(x*x)) * x
cat('Panjang Proyeksi  :', len(x)*cos(angle(x, y, F)), '\n')
cat('Vektor Proyeksi  :', paste(MASS::fractions(proj_vec)), '\n')
return(invisible(proj_vec))
}
proj(x, y)
proj(x, y)
styler::tidyverse_style()
styler::style_dir()
len(x)
len(y)
angle(x, y)
proj(x, y)
# bayangan vektor x ke vektor y
proj <- function(x, y) {
# proyeksi  y ke x
proj_vec <- (sum(x * y) / sum(x * x)) * x
cat("Panjang Proyeksi  :", len(x) * cos(angle(x, y, F)), "\n")
cat("Vektor Proyeksi    :", paste(MASS::fractions(proj_vec)), "\n")
return(invisible(proj_vec))
}
proj(x, y)
# bayangan vektor x ke vektor y
proj <- function(x, y) {
# proyeksi  y ke x
proj_vec <- (sum(x * y) / sum(x * x)) * x
cat("Panjang Proyeksi  :", len(x) * cos(angle(x, y, F)), "\n")
cat("Vektor Proyeksi   :", paste(MASS::fractions(proj_vec)), "\n")
return(invisible(proj_vec))
}
proj(x, y)
# bayangan vektor x ke vektor y
proj <- function(x, y) {
# proyeksi  y ke x
proj_vec <- (sum(x * y) / sum(x * x)) * x
cat("Panjang Proyeksi  :", len(x) * cos(angle(x, y, F)), "\n")
cat("Vektor Proyeksi   :[", paste(MASS::fractions(proj_vec)), "]\n")
return(invisible(proj_vec))
}
proj(x, y)
# bayangan vektor x ke vektor y
proj <- function(x, y) {
# proyeksi  y ke x
proj_vec <- (sum(x * y) / sum(x * x)) * x
cat("Panjang Proyeksi  :", len(x) * cos(angle(x, y, F)), "\n")
cat("Vektor Proyeksi   :[", paste(MASS::fractions(proj_vec), sep = ','), "]\n")
return(invisible(proj_vec))
}
proj(x, y)
