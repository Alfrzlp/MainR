error = function(e){
new_value <- matrix(mat_jarak[-idx, idx], nrow = 1) %>%
`colnames<-`(names(mat_jarak[-idx, idx])) %>%
`rownames<-`(rownames(mat_jarak)[-idx]) %>%
apply(1, FUN = fun_method)
return(new_value)
}
)
new_value <- c(0, new_value)
names(new_value)[1] <- new_name
new_mat <- rbind(new_value[-1], mat_jarak[-idx, -idx])
new_mat <- cbind(new_value, new_mat)
colnames(new_mat) <- names(new_value)
cli::cli_h1('Iterasi ke-{i}')
if (i == 1) {
cli::cli_h3(cli::col_br_cyan('Matriks jarak Awal :'))
print(knitr::kable(mat_jarak))
}
cli::cli_h3('Nilai Minimal : {.emph {nilai_min}} Pada {.emph {rownames(pos_min)[1]}} dengan {.emph {rownames(pos_min)[2]}}')
cli::cli_h3(cli::col_br_cyan('Matriks jarak Baru :\n'))
print(knitr::kable(new_mat))
i <- i + 1
mat_jarak <- new_mat
}
}
aglo_clust(mat_jarak = mat_jarak)
aglo_clust <- function(mat_jarak, method = 'single'){
method <- match.arg(stringr::str_to_lower(method), c('single linkage', 'complete linkage', 'average linkage'))
if (method == 'single linkage') {
fun_method <- min
} else if (method == 'complete linkage') {
fun_method <- max
} else if (method == 'average linkage') {
fun_method <- mean
}
cli::cli_div(
theme = list(span.emph = list(color = "orange", fontweight = "bold"))
)
cli::cli_alert_success('Metode : {.emph {method}}')
i <- 1
while (nrow(mat_jarak) != 2) {
nilai_min <- min(mat_jarak[upper.tri(mat_jarak)])
pos_min <- which(mat_jarak == nilai_min, arr.ind = T)
idx <- as.numeric(pos_min[,'col'])
new_name <- paste(rownames(pos_min), collapse = ', ')
# new_value <- apply(mat_jarak[-idx, idx], 1, FUN = min)
new_value <- tryCatch(
{
new_value <- apply(mat_jarak[-idx, idx], 1, FUN = fun_method)
},
error = function(e){
new_value <- matrix(mat_jarak[-idx, idx], nrow = 1) %>%
`colnames<-`(names(mat_jarak[-idx, idx])) %>%
`rownames<-`(rownames(mat_jarak)[-idx]) %>%
apply(1, FUN = fun_method)
return(new_value)
}
)
new_value <- c(0, new_value)
names(new_value)[1] <- new_name
new_mat <- rbind(new_value[-1], mat_jarak[-idx, -idx])
new_mat <- cbind(new_value, new_mat)
colnames(new_mat) <- names(new_value)
cli::cli_h1('Iterasi ke-{i}')
if (i == 1) {
cli::cli_h3(cli::col_br_cyan('Matriks jarak Awal :'))
print(knitr::kable(mat_jarak))
}
cli::cli_h3('Nilai Minimal : {.emph {nilai_min}} Pada {.emph {rownames(pos_min)[1]}} dengan {.emph {rownames(pos_min)[2]}}')
cli::cli_h3(cli::col_br_cyan('Matriks jarak Baru :\n'))
print(knitr::kable(new_mat))
i <- i + 1
mat_jarak <- new_mat
}
}
aglo_clust(mat_jarak = mat_jarak)
aglo_clust(mat_jarak = mat_jarak, method = 'compl')
cli::cli_inform('Nilai Minimal : {.emph {nilai_min}} Pada {.emph {rownames(pos_min)[1]}} dengan {.emph {rownames(pos_min)[2]}}')
cli::cli_inform(cli::col_br_cyan('Matriks jarak Baru :\n'))
aglo_clust <- function(mat_jarak, method = 'single'){
method <- match.arg(stringr::str_to_lower(method), c('single linkage', 'complete linkage', 'average linkage'))
if (method == 'single linkage') {
fun_method <- min
} else if (method == 'complete linkage') {
fun_method <- max
} else if (method == 'average linkage') {
fun_method <- mean
}
cli::cli_div(
theme = list(span.emph = list(color = "orange", fontweight = "bold"))
)
cli::cli_alert_success('Metode : {.emph {method}}')
i <- 1
while (nrow(mat_jarak) != 2) {
nilai_min <- min(mat_jarak[upper.tri(mat_jarak)])
pos_min <- which(mat_jarak == nilai_min, arr.ind = T)
idx <- as.numeric(pos_min[,'col'])
new_name <- paste(rownames(pos_min), collapse = ', ')
# new_value <- apply(mat_jarak[-idx, idx], 1, FUN = min)
new_value <- tryCatch(
{
new_value <- apply(mat_jarak[-idx, idx], 1, FUN = fun_method)
},
error = function(e){
new_value <- matrix(mat_jarak[-idx, idx], nrow = 1) %>%
`colnames<-`(names(mat_jarak[-idx, idx])) %>%
`rownames<-`(rownames(mat_jarak)[-idx]) %>%
apply(1, FUN = fun_method)
return(new_value)
}
)
new_value <- c(0, new_value)
names(new_value)[1] <- new_name
new_mat <- rbind(new_value[-1], mat_jarak[-idx, -idx])
new_mat <- cbind(new_value, new_mat)
colnames(new_mat) <- names(new_value)
cli::cli_h1('Iterasi ke-{i}')
if (i == 1) {
cli::cli_h3(cli::col_br_cyan('Matriks jarak Awal :'))
print(knitr::kable(mat_jarak))
}
cli::cli_inform('Nilai Minimal : {.emph {nilai_min}} Pada {.emph {rownames(pos_min)[1]}} dengan {.emph {rownames(pos_min)[2]}}')
cli::cli_inform(cli::col_br_cyan('Matriks jarak Baru :\n'))
print(knitr::kable(new_mat))
i <- i + 1
mat_jarak <- new_mat
}
}
aglo_clust(mat_jarak = mat_jarak)
aglo_clust <- function(mat_jarak, method = 'single'){
method <- match.arg(stringr::str_to_lower(method), c('single linkage', 'complete linkage', 'average linkage'))
if (method == 'single linkage') {
fun_method <- min
} else if (method == 'complete linkage') {
fun_method <- max
} else if (method == 'average linkage') {
fun_method <- mean
}
cli::cli_div(
theme = list(span.emph = list(color = "orange", fontweight = "bold"))
)
cli::cli_alert_success('Metode : {.emph {method}}')
i <- 1
while (nrow(mat_jarak) != 2) {
nilai_min <- min(mat_jarak[upper.tri(mat_jarak)])
pos_min <- which(mat_jarak == nilai_min, arr.ind = T)
idx <- as.numeric(pos_min[,'col'])
new_name <- paste(rownames(pos_min), collapse = ', ')
# new_value <- apply(mat_jarak[-idx, idx], 1, FUN = min)
new_value <- tryCatch(
{
new_value <- apply(mat_jarak[-idx, idx], 1, FUN = fun_method)
},
error = function(e){
new_value <- matrix(mat_jarak[-idx, idx], nrow = 1) %>%
`colnames<-`(names(mat_jarak[-idx, idx])) %>%
`rownames<-`(rownames(mat_jarak)[-idx]) %>%
apply(1, FUN = fun_method)
return(new_value)
}
)
new_value <- c(0, new_value)
names(new_value)[1] <- new_name
new_mat <- rbind(new_value[-1], mat_jarak[-idx, -idx])
new_mat <- cbind(new_value, new_mat)
colnames(new_mat) <- names(new_value)
cli::cli_h1('Iterasi ke-{i}')
if (i == 1) {
cli::cli_h3(cli::col_br_cyan('Matriks jarak Awal :'))
print(knitr::kable(mat_jarak))
print('\n')
}
cli::cli_inform('Nilai Minimal : {.emph {nilai_min}} Pada {.emph {rownames(pos_min)[1]}} dengan {.emph {rownames(pos_min)[2]}}')
cli::cli_inform(cli::col_br_cyan('Matriks jarak Baru :\n'))
print(knitr::kable(new_mat))
i <- i + 1
mat_jarak <- new_mat
}
}
aglo_clust(mat_jarak = mat_jarak)
aglo_clust <- function(mat_jarak, method = 'single'){
method <- match.arg(stringr::str_to_lower(method), c('single linkage', 'complete linkage', 'average linkage'))
if (method == 'single linkage') {
fun_method <- min
} else if (method == 'complete linkage') {
fun_method <- max
} else if (method == 'average linkage') {
fun_method <- mean
}
cli::cli_div(
theme = list(span.emph = list(color = "orange", fontweight = "bold"))
)
cli::cli_alert_success('Metode : {.emph {method}}')
i <- 1
while (nrow(mat_jarak) != 2) {
nilai_min <- min(mat_jarak[upper.tri(mat_jarak)])
pos_min <- which(mat_jarak == nilai_min, arr.ind = T)
idx <- as.numeric(pos_min[,'col'])
new_name <- paste(rownames(pos_min), collapse = ', ')
# new_value <- apply(mat_jarak[-idx, idx], 1, FUN = min)
new_value <- tryCatch(
{
new_value <- apply(mat_jarak[-idx, idx], 1, FUN = fun_method)
},
error = function(e){
new_value <- matrix(mat_jarak[-idx, idx], nrow = 1) %>%
`colnames<-`(names(mat_jarak[-idx, idx])) %>%
`rownames<-`(rownames(mat_jarak)[-idx]) %>%
apply(1, FUN = fun_method)
return(new_value)
}
)
new_value <- c(0, new_value)
names(new_value)[1] <- new_name
new_mat <- rbind(new_value[-1], mat_jarak[-idx, -idx])
new_mat <- cbind(new_value, new_mat)
colnames(new_mat) <- names(new_value)
cli::cli_h1('Iterasi ke-{i}')
if (i == 1) {
cli::cli_h3(cli::col_br_cyan('Matriks jarak Awal :'))
print(knitr::kable(mat_jarak))
cat('\n')
}
cli::cli_inform('Nilai Minimal : {.emph {nilai_min}} Pada {.emph {rownames(pos_min)[1]}} dengan {.emph {rownames(pos_min)[2]}}')
cli::cli_inform(cli::col_br_cyan('Matriks jarak Baru :\n'))
print(knitr::kable(new_mat))
i <- i + 1
mat_jarak <- new_mat
}
}
aglo_clust(mat_jarak = mat_jarak)
aglo_clust <- function(mat_jarak, method = 'single'){
method <- match.arg(stringr::str_to_lower(method), c('single linkage', 'complete linkage', 'average linkage'))
if (method == 'single linkage') {
fun_method <- min
} else if (method == 'complete linkage') {
fun_method <- max
} else if (method == 'average linkage') {
fun_method <- mean
}
cli::cli_div(
theme = list(span.emph = list(color = "orange", fontweight = "bold"))
)
cli::cli_alert_success('Metode : {.emph {method}}')
i <- 1
while (nrow(mat_jarak) != 2) {
nilai_min <- min(mat_jarak[upper.tri(mat_jarak)])
pos_min <- which(mat_jarak == nilai_min, arr.ind = T)
idx <- as.numeric(pos_min[,'col'])
new_name <- paste(rownames(pos_min), collapse = ', ')
# new_value <- apply(mat_jarak[-idx, idx], 1, FUN = min)
new_value <- tryCatch(
{
new_value <- apply(mat_jarak[-idx, idx], 1, FUN = fun_method)
},
error = function(e){
new_value <- matrix(mat_jarak[-idx, idx], nrow = 1) %>%
`colnames<-`(names(mat_jarak[-idx, idx])) %>%
`rownames<-`(rownames(mat_jarak)[-idx]) %>%
apply(1, FUN = fun_method)
return(new_value)
}
)
new_value <- c(0, new_value)
names(new_value)[1] <- new_name
new_mat <- rbind(new_value[-1], mat_jarak[-idx, -idx])
new_mat <- cbind(new_value, new_mat)
colnames(new_mat) <- names(new_value)
cli::cli_h1('Iterasi ke-{i}')
if (i == 1) {
cli::cli_inform(cli::col_br_cyan('Matriks jarak Awal :'))
print(knitr::kable(mat_jarak))
cat('\n')
}
cli::cli_inform('Nilai Minimal : {.emph {nilai_min}} Pada {.emph {rownames(pos_min)[1]}} dengan {.emph {rownames(pos_min)[2]}}')
cli::cli_inform(cli::col_br_cyan('Matriks jarak Baru :\n'))
print(knitr::kable(new_mat))
i <- i + 1
mat_jarak <- new_mat
}
}
aglo_clust(mat_jarak = mat_jarak)
cli::col_br_cyan('Matriks jarak Baru :\n')
while (nrow(mat_jarak) != 2) {
nilai_min <- min(mat_jarak[upper.tri(mat_jarak)])
pos_min <- which(mat_jarak == nilai_min, arr.ind = T)
idx <- as.numeric(pos_min[,'col'])
new_name <- paste(rownames(pos_min), collapse = ', ')
# new_value <- apply(mat_jarak[-idx, idx], 1, FUN = min)
new_value <- tryCatch(
{
new_value <- apply(mat_jarak[-idx, idx], 1, FUN = fun_method)
},
error = function(e){
new_value <- matrix(mat_jarak[-idx, idx], nrow = 1) %>%
`colnames<-`(names(mat_jarak[-idx, idx])) %>%
`rownames<-`(rownames(mat_jarak)[-idx]) %>%
apply(1, FUN = fun_method)
return(new_value)
}
)
new_value <- c(0, new_value)
names(new_value)[1] <- new_name
new_mat <- rbind(new_value[-1], mat_jarak[-idx, -idx])
new_mat <- cbind(new_value, new_mat)
colnames(new_mat) <- names(new_value)
cli::cli_h1('Iterasi ke-{i}')
if (i == 1) {
cli::cli_inform(cli::col_br_cyan('Matriks jarak Awal :'))
print(knitr::kable(mat_jarak))
cat('\n')
}
cli::cli_inform('Nilai Minimal : {.emph {nilai_min}} Pada {.emph {rownames(pos_min)[1]}} dengan {.emph {rownames(pos_min)[2]}}')
cli::col_br_cyan('Matriks jarak Baru :\n')
print(knitr::kable(new_mat))
i <- i + 1
mat_jarak <- new_mat
}
cli::cli_blockquote(cli::col_br_cyan('Matriks jarak Baru :\n'))
aglo_clust <- function(mat_jarak, method = 'single'){
method <- match.arg(stringr::str_to_lower(method), c('single linkage', 'complete linkage', 'average linkage'))
if (method == 'single linkage') {
fun_method <- min
} else if (method == 'complete linkage') {
fun_method <- max
} else if (method == 'average linkage') {
fun_method <- mean
}
cli::cli_div(
theme = list(span.emph = list(color = "orange", fontweight = "bold"))
)
cli::cli_alert_success('Metode : {.emph {method}}')
i <- 1
while (nrow(mat_jarak) != 2) {
nilai_min <- min(mat_jarak[upper.tri(mat_jarak)])
pos_min <- which(mat_jarak == nilai_min, arr.ind = T)
idx <- as.numeric(pos_min[,'col'])
new_name <- paste(rownames(pos_min), collapse = ', ')
# new_value <- apply(mat_jarak[-idx, idx], 1, FUN = min)
new_value <- tryCatch(
{
new_value <- apply(mat_jarak[-idx, idx], 1, FUN = fun_method)
},
error = function(e){
new_value <- matrix(mat_jarak[-idx, idx], nrow = 1) %>%
`colnames<-`(names(mat_jarak[-idx, idx])) %>%
`rownames<-`(rownames(mat_jarak)[-idx]) %>%
apply(1, FUN = fun_method)
return(new_value)
}
)
new_value <- c(0, new_value)
names(new_value)[1] <- new_name
new_mat <- rbind(new_value[-1], mat_jarak[-idx, -idx])
new_mat <- cbind(new_value, new_mat)
colnames(new_mat) <- names(new_value)
cli::cli_h1('Iterasi ke-{i}')
if (i == 1) {
cli::cli_text(cli::col_br_cyan('Matriks jarak Awal :'))
print(knitr::kable(mat_jarak))
cat('\n')
}
cli::cli_text('Nilai Minimal : {.emph {nilai_min}} Pada {.emph {rownames(pos_min)[1]}} dengan {.emph {rownames(pos_min)[2]}}')
cli::cli_text(cli::col_br_cyan('Matriks jarak Baru :\n'))
print(knitr::kable(new_mat))
i <- i + 1
mat_jarak <- new_mat
}
cli::cli_end()
}
aglo_clust(mat_jarak = mat_jarak)
aglo_clust <- function(mat_jarak, method = 'single'){
method <- match.arg(stringr::str_to_lower(method), c('single linkage', 'complete linkage', 'average linkage'))
if (method == 'single linkage') {
fun_method <- min
} else if (method == 'complete linkage') {
fun_method <- max
} else if (method == 'average linkage') {
fun_method <- mean
}
cli::cli_div(
theme = list(span.emph = list(color = "orange", fontweight = "bold"))
)
cli::cli_alert_success('Metode : {.emph {method}}')
i <- 1
while (nrow(mat_jarak) != 2) {
nilai_min <- min(mat_jarak[upper.tri(mat_jarak)])
pos_min <- which(mat_jarak == nilai_min, arr.ind = T)
idx <- as.numeric(pos_min[,'col'])
new_name <- paste(rownames(pos_min), collapse = ', ')
# new_value <- apply(mat_jarak[-idx, idx], 1, FUN = min)
new_value <- tryCatch(
{
new_value <- apply(mat_jarak[-idx, idx], 1, FUN = fun_method)
},
error = function(e){
new_value <- matrix(mat_jarak[-idx, idx], nrow = 1) %>%
`colnames<-`(names(mat_jarak[-idx, idx])) %>%
`rownames<-`(rownames(mat_jarak)[-idx]) %>%
apply(1, FUN = fun_method)
return(new_value)
}
)
new_value <- c(0, new_value)
names(new_value)[1] <- new_name
new_mat <- rbind(new_value[-1], mat_jarak[-idx, -idx])
new_mat <- cbind(new_value, new_mat)
colnames(new_mat) <- names(new_value)
cli::cli_h1('Iterasi ke-{i}')
if (i == 1) {
cli::cli_text(cli::col_br_cyan('Matriks jarak Awal :'))
print(knitr::kable(mat_jarak))
cat('\n')
}
cli::cli_text('Nilai Minimal : {.emph {nilai_min}} Pada {.emph {rownames(pos_min)[1]}} dengan {.emph {rownames(pos_min)[2]}}')
cli::cli_text(cli::col_br_cyan('Matriks jarak Baru :\n'))
print(knitr::kable(new_mat))
i <- i + 1
mat_jarak <- new_mat
}
}
aglo_clust(mat_jarak = mat_jarak)
mat_jarak
mat_jarak <-
read_string(s) %>%
separator_convert(everything()) %>%
`colnames<-`(1:ncol(.)) %>%
`rownames<-`(1:nrow(.)) %>%
as.matrix()
mat_jarak
aglo_clust(mat_jarak = mat_jarak)
# Analisis Jalur ----------------------------------------------------------
s <- '1 30 70 6 15
2 32 78 7 20
3 45 56 5 23
4 24 45 5 30
5 46 68 6 22
6 32 67 7 18
7 33 54 6 25
8 35 50 8 15
9 20 45 6 16
10 41 70 8 20'
library(dm)
dat <- read_string(s) %>%
select(-V1) %>%
set_names(c('x1', 'x2', 'x3', 'x4')) %>%
scale() %>%
as.data.frame()
cor(dat)
lm(x3 ~ x1 + x2, data = dat) %>%
coef() %>%
round(3)
lm(x4 ~ x1 + x2 + x3, data = dat) %>%
coef() %>%
round(3)
get_hasil <- function(res){
res <- broom::tidy(res)
t(res[, 2]) %>%
as.data.frame() %>%
setNames(res$term)
}
m2 <- lm(x4 ~ x1 + x2 + x3, data = dat)
m1 <- lm(x3 ~ x1 + x2, data = dat)
m1 %>% coef() %>% round(3)
m2 <- lm(x4 ~ x1 + x2 + x3, data = dat)
m2 %>% coef() %>% round(3)
get_hasil <- function(res){
res <- broom::tidy(res)
t(res[, 2]) %>%
as.data.frame() %>%
setNames(res$term)
}
get_hasil(m1)
get_hasil(m2)
resm1 <- get_hasil(m1)
resm2 <- get_hasil(m2)
resm1$x1 * resm2$x3
resm1$x2 * resm2$x3
# 20/21 No 2 --------------------------------------------------------------
s <- '1 30 70 12 15
2 32 78 14 20
3 45 56 10 23
4 24 45 10 30
5 46 68 12 22
6 32 67 14 18
7 33 54 12 25
8 35 50 16 15
9 20 45 12 16
10 41 70 16 20'
read_string(s)
dat <- read_string(s, col_names = paste0('x', 1:5))
dat
dat <- read_string(s) %>%
select(-1) %>%
setNames(paste0('x', 1:4))
dat
dat <- read_string(s) %>%
select(-1) %>%
setNames(paste0('x', 1:4)) %>%
scale() %>%
as.data.frame()
dat
lm(x3 ~ x1 + x2)
lm(x3 ~ x1 + x2, data = dat)
lm(x3 ~ x1 + x2, data = dat)
lm(x4 ~ x1 + x2 + x3, data = dat)
m1 <- lm(x4 ~ x1 + x2 + x3, data = dat)
m2 <- lm(x3 ~ x1 + x2, data = dat)
m1 %>% coef() %>% round(3)
m2 %>% coef() %>% round(3)
m1 %>% summary()
m2 %>% summary()
