pull(obs)
glimpse(df_train)
glimpse(df_test)
obs_outlier$data %>%
filter(color == 'outlier') %>%
pull(obs)
library(tidyverse)
library(tidymodels)
tidymodels::tidymodels_prefer()
obs_outlier$data %>%
filter(color == 'outlier') %>%
pull(obs)
obs_outlier <- obs_outlier$data %>%
filter(color == 'outlier') %>%
pull(obs)
df_train <- df_train %>%
slice(-obs_outlier)
# EDA -----------------------------------------------------------
ggplot(df_train, aes(x = score)) +
geom_histogram(bins = 50, col = "white")
# EDA -----------------------------------------------------------
ggplot(df_train, aes(x = score)) +
geom_histogram(bins = 30, col = "white")
# EDA -----------------------------------------------------------
ggplot(df_train, aes(x = score)) +
geom_histogram(bins = 30, col = "white") +
scale_x_log10()
# Train test split ---------------------------------------------------------
set.seed(1)
splits <- initial_split(df_train, prop = 0.75)
splits
train_set <- training(splits)
test_set  <- testing(splits)
set.seed(1)
val_set <- validation_split(
train_set,
prop = 0.8
)
val_set
# Model -------------------------------------------------------------------
model_spec <-
rand_forest(mtry = 18, min_n = 18, trees = tune()) %>%
set_engine('ranger', num.threads = 4) %>%
set_mode('regression')
# Workflow ----------------------------------------------------------------
cor(df_train$Id, df_train$score)
my_recipe <-
recipe(score ~ ., data = train_set) %>%
# update_role(Id, new_role = "id") %>%
step_pca(var_pca, num_comp = 1)
my_recipe %>% summary()
my_workflow <-
workflow() %>%
add_model(model_spec) %>%
add_recipe(my_recipe)
# Training ----------------------------------------------------------------
model_res <-
my_workflow %>%
tune_grid(
val_set,
grid = 50,
control = control_grid(save_pred = TRUE, verbose = T, allow_par = T),
metrics = reg_metric
)
model_res %>%
collect_metrics() %>%
filter(.metric == 'rmse') %>%
arrange(mean) %>%
select(mean)
model_res %>%
collect_metrics() %>%
pivot_wider(names_from = .metric, values_from = mean) %>%
arrange(rmse, desc(rsq))
# Model terbaik -----------------------------------------------------------
best_model <- model_res %>%
select_best()
final_wf <- my_workflow %>%
finalize_workflow(best_model)
# fit terakhir
final_fit <- final_wf %>% fit(df_train)
final_fit
# Evaluasi ----------------------------------------------------------------
df_train %>%
bind_cols(predict(final_fit, .)) %>%
reg_metric(truth = score, estimate = .pred)
test_set %>%
bind_cols(predict(final_fit, .)) %>%
reg_metric(truth = score, estimate = .pred)
# Prediksi ----------------------------------------------------------------
preds <- predict(final_fit, new_data = df_test) %>% pull()
preds
hasil <- df_test %>%
bind_cols(predict(final_fit, new_data = .)) %>%
select(Id, Expected = .pred)
write.csv(hasil, 'D:/__Datasets/sub.csv', row.names = F, quote = F)
# ------- PCA
vif_score <- car::vif(m1)
round(vif_score, 3)
var_pca <- names(vif_score[vif_score > 10])
rpca <- princomp(df_train[var_pca])
summary(rpca)
# 1 komponen
df_train %>%
select(-var_pca) %>%
mutate(pca = rpca$scores[,1])
# 1 komponen
df_train %>%
select(-var_pca) %>%
mutate(pca = rpca$scores[,1]) %>%
lm(score ~ ., .)
# 1 komponen
df_train %>%
select(-var_pca) %>%
mutate(pca = rpca$scores[,1]) %>%
lm(score ~ ., .) %>%
summary()
parsnip:::parsnip_addin()
model_spec <-
boost_tree(tree_depth = tune(), trees = tune(), learn_rate = tune(), min_n = tune(), loss_reduction = tune(), sample_size = tune(), stop_iter = tune()) %>%
set_engine('xgboost') %>%
set_mode('regression')
my_workflow <-
workflow() %>%
add_model(model_spec) %>%
add_recipe(my_recipe)
# Training ----------------------------------------------------------------
model_res <-
my_workflow %>%
tune_grid(
val_set,
grid = 50,
control = control_grid(save_pred = TRUE, verbose = T, allow_par = T),
metrics = reg_metric
)
model_res %>%
collect_metrics() %>%
filter(.metric == 'rmse') %>%
arrange(mean) %>%
select(mean)
model_res %>%
collect_metrics() %>%
pivot_wider(names_from = .metric, values_from = mean) %>%
arrange(rmse, desc(rsq))
model_res %>%
select_best()
# Model terbaik -----------------------------------------------------------
best_model <- model_res %>%
select_best()
final_wf <- my_workflow %>%
finalize_workflow(best_model)
# Model terbaik -----------------------------------------------------------
best_model <- model_res %>%
select_best(rmse)
# Model terbaik -----------------------------------------------------------
best_model <- model_res %>%
select_best(metric = 'rmse')
final_wf <- my_workflow %>%
finalize_workflow(best_model)
final_wf
# fit terakhir
final_fit <- final_wf %>% fit(df_train)
# Evaluasi ----------------------------------------------------------------
df_train %>%
bind_cols(predict(final_fit, .)) %>%
reg_metric(truth = score, estimate = .pred)
test_set %>%
bind_cols(predict(final_fit, .)) %>%
reg_metric(truth = score, estimate = .pred)
hasil <- df_test %>%
bind_cols(predict(final_fit, new_data = .)) %>%
select(Id, Expected = .pred)
write.csv(hasil, 'D:/__Datasets/sub.csv', row.names = F, quote = F)
loc <- 'D:/__Datasets/ml/2022-regression-data-challenge'
df_train <- read.csv(str_glue('{loc}/train.csv'))
df_test <- read.csv(str_glue('{loc}/test.csv'))
df_sub <- read.csv(str_glue('{loc}/submission.csv'))
# EDA -----------------------------------------------------------
ggplot(df_train, aes(x = score)) +
geom_histogram(bins = 30, col = "white")
df_train
# --------- ns
plot_smoother <- function(deg_free, variabel) {
ggplot(ames_train, aes(x = {{variabel}}, y = 10^score)) +
geom_point(alpha = .2) +
# scale_y_log10() +
# natural splines.
geom_smooth(
method = lm,
formula = y ~ ns(x, df = deg_free),
color = "lightblue",
se = FALSE
) +
labs(title = paste(deg_free, "Spline Terms"),
y = "Score")
}
plot_smoother(df_train, V1)
# --------- ns
plot_smoother <- function(deg_free, variabel) {
ggplot(df_train, aes(x = {{variabel}}, y = 10^score)) +
geom_point(alpha = .2) +
# scale_y_log10() +
# natural splines.
geom_smooth(
method = lm,
formula = y ~ ns(x, df = deg_free),
color = "lightblue",
se = FALSE
) +
labs(title = paste(deg_free, "Spline Terms"),
y = "Score")
}
plot_smoother(df_train, V1)
df_train
plot_smoother(df_train, V3)
library(splines)
# --------- ns
library(patchwork)
plot_smoother(df_train, V3)
plot_smoother(2, V3)
plot_smoother(5, V3)
plot_smoother(5, V5)
ggplot(df_train, aes(x = {{variabel}}, y = score)) +
geom_point(alpha = .2) +
# scale_y_log10() +
# natural splines.
geom_smooth(
method = lm,
formula = y ~ ns(x, df = deg_free),
color = "lightblue",
se = FALSE
) +
labs(title = paste(deg_free, "Spline Terms"),
y = "Score")
plot_smoother <- function(deg_free, variabel) {
ggplot(df_train, aes(x = {{variabel}}, y = score)) +
geom_point(alpha = .2) +
# scale_y_log10() +
# natural splines.
geom_smooth(
method = lm,
formula = y ~ ns(x, df = deg_free),
color = "lightblue",
se = FALSE
) +
labs(title = paste(deg_free, "Spline Terms"),
y = "Score")
}
plot_smoother(5, V5)
pracma::pchip(df_train$score)
pracma::pchip(1:nrow(df_train), df_train$score)
seq(1, 6, by = 0.5)
pracma::pchip(1:nrow(df_train), df_train$score, df_test$Id)
df_train %>%
arrange(Id)
df_train %>%
arrange(Id) %>%
pracma::pchip(.$Id, df_train$score, df_test$Id)
df_train %>%
arrange(Id) %>%
pracma::pchip((.)$Id, df_train$score, df_test$Id)
df_train %>%
arrange(Id) %>%
pracma::pchip((.)$Id, (.)$score, df_test$Id)
df_train %>%
arrange(Id) %>% {
pracma::pchip((.)$Id, (.)$score, df_test$Id)
}
preds <- df_train %>%
arrange(Id) %>% {
pracma::pchip((.)$Id, (.)$score, df_test$Id)
}
hasil$Expected
pak::pak('signal')
df_train %>%
arrange(Id) %>% {
signal::interpl((.)$Id, (.)$score, df_test$Id)
}
signal::interpl
df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id)
}
df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'spline')
}
?signal::interp1
df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'spline', extrap = T)
}
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'spline', extrap = T)
}
df_sub
df_sub$Expected <- preds
hasil <- df_sub %>%
mutate(Expected = preds)
write.csv(hasil, 'D:/__Datasets/sub.csv', row.names = F, quote = F)
system(
'kaggle competitions submit -c 2022-regression-data-challenge -f D:/__Datasets/sub.csv -m "Message"'
)
system(
'kaggle competitions submit -c 2022-regression-data-challenge -f D:/__Datasets/sub.csv -m "Message"'
)
system(
'kaggle competitions submit -c 2022-regression-data-challenge -f D:/__Datasets/sub.csv -m "Message"'
)
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'phcip', extrap = T)
}
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'pchip', extrap = T)
}
# -------------------------------------------------------------------------
hasil <- df_sub %>%
mutate(Expected = preds)
hasil %>% is.na() %>% colSums()
write.csv(hasil, 'D:/__Datasets/sub.csv', row.names = F, quote = F)
system(
'kaggle competitions submit -c 2022-regression-data-challenge -f D:/__Datasets/sub.csv -m "Message"'
)
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'spline', extrap = T)
}
hasil$Expected[1:5]
preds
preds[1:5]
hasil$Expected[1:5]
# -------------------------------------------------------------------------
hasil <- df_sub %>%
mutate(Expected = preds)
write.csv(hasil, 'D:/__Datasets/sub.csv', row.names = F, quote = F)
system(
'kaggle competitions submit -c 2022-regression-data-challenge -f D:/__Datasets/sub.csv -m "Message"'
)
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'pchip', extrap = T)
}
# -------------------------------------------------------------------------
hasil <- df_sub %>%
mutate(Expected = preds)
# experiment --------------------------------------------------------------
df_train %>%
mutate(
inp = signal::interp1(Id, score, Id, method = 'pchip', extrap = T)
)
# experiment --------------------------------------------------------------
df_train %>%
arrange(Id) %>%
mutate(
inp = signal::interp1(Id, score, Id, method = 'pchip', extrap = T)
)
# experiment --------------------------------------------------------------
df_train %>%
arrange(Id) %>%
mutate(
inp = signal::interp1(Id, score, Id, method = 'pchip', extrap = T)
) %>%
lm(score ~ inp)
# experiment --------------------------------------------------------------
df_train %>%
arrange(Id) %>%
mutate(
inp = signal::interp1(Id, score, Id, method = 'pchip', extrap = T)
) %>%
lm(score ~ inp, .)
1.000e+00
-2.085e-13
# experiment --------------------------------------------------------------
df_train <- df_train %>%
arrange(Id) %>%
mutate(
inp = signal::interp1(Id, score, Id, method = 'pchip', extrap = T)
)
df_train %>%
select(score, inp)
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'nearest', extrap = T)
}
# -------------------------------------------------------------------------
hasil <- df_sub %>%
mutate(Expected = preds)
hasil %>% is.na() %>% colSums()
hasil %>% filter(is.na(Expected))
library(tidyverse)
library(tidymodels)
tidymodels::tidymodels_prefer()
hasil %>% filter(is.na(Expected))
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'cubic', extrap = T)
}
# -------------------------------------------------------------------------
hasil <- df_sub %>%
mutate(Expected = preds)
hasil %>% is.na() %>% colSums()
write.csv(hasil, 'D:/__Datasets/sub.csv', row.names = F, quote = F)
system(
'kaggle competitions submit -c 2022-regression-data-challenge -f D:/__Datasets/sub.csv -m "Message"'
)
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'nearest', extrap = T)
}
# -------------------------------------------------------------------------
hasil <- df_sub %>%
mutate(Expected = preds)
hasil %>% is.na() %>% colSums()
hasil %>% filter(is.na(Expected))
hasil$Expected[1:5]
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'pchis', extrap = T)
}
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'pchi', extrap = T)
}
preds[1:5]
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'linear', extrap = T)
}
preds[1:5]
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'pc', extrap = T)
}
preds[1:5]
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'nea', extrap = T)
}
# -------------------------------------------------------------------------
hasil <- df_sub %>%
mutate(Expected = preds)
hasil %>% is.na() %>% colSums()
hasil %>% filter(is.na(Expected))
# Prediksi ----------------------------------------------------------------
preds <- predict(final_fit, new_data = df_test) %>% pull()
hasil
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'nea', extrap = T)
}
# -------------------------------------------------------------------------
hasil <- df_sub %>%
mutate(Expected = preds)
# Prediksi ----------------------------------------------------------------
preds <- predict(final_fit, new_data = df_test) %>% pull()
hasil %>% is.na() %>% colSums()
hasil %>% filter(is.na(Expected))
hasil %>%
mutate(x = preds)
hasil %>%
mutate(x = preds, Expected = ifelse(is.na(Expected), x, Expected))
hasil %>%
mutate(x = preds, Expected = ifelse(is.na(Expected), x, Expected)) %>%
select(-preds)
hasil %>%
mutate(x = preds, Expected = ifelse(is.na(Expected), x, Expected)) %>%
select(-x)
hasil %>%
mutate(x = preds, Expected = ifelse(is.na(Expected), x, Expected)) %>%
select(-x) %>%
filter(is.na(Expected))
hasil <- hasil %>%
mutate(x = preds, Expected = ifelse(is.na(Expected), x, Expected)) %>%
select(-x)
write.csv(hasil, 'D:/__Datasets/sub.csv', row.names = F, quote = F)
system(
'kaggle competitions submit -c 2022-regression-data-challenge -f D:/__Datasets/sub.csv -m "Message"'
)
preds <- df_train %>%
arrange(Id) %>% {
signal::interp1((.)$Id, (.)$score, df_test$Id,
method = 'pc', extrap = T)
}
preds[1:5]
preds[1:5] - 0.001
# -------------------------------------------------------------------------
hasil <- df_sub %>%
mutate(Expected = preds - 0.001)
hasil %>% is.na() %>% colSums()
hasil %>% filter(is.na(Expected))
write.csv(hasil, 'D:/__Datasets/sub.csv', row.names = F, quote = F)
system(
'kaggle competitions submit -c 2022-regression-data-challenge -f D:/__Datasets/sub.csv -m "Message"'
)
