pm <- glm(jk ~ tk + rb + kp, data = dataku, family = 'poisson')
summary(pm)
lmtest::lrtest(pm)
qchisq(0.05, 5, lower.tail = F)
3016.3/6970.4
dataku <-
readxl::read_xlsx('D:/__SEMESTER 5/Metode Penelitian/data.xlsx') %>%
# Ganti nama kolom lebih simpel
`colnames<-`(c('kab', 'jk', 'tk', 'rb', 'kp')) %>%
type_convert() %>%
drop_na()
head(dataku)
# Poisson Regression ------------------------------------------------------
# Poisson Model
pm <- glm(jk ~ tk + rb + kp, data = dataku, family = 'poisson')
summary(pm)
lmtest::lrtest(pm)
anova(pm, glm(jk ~ 1, data = dataku, family = 'poisson'))
anova(glm(jk ~ 1, data = dataku, family = 'poisson'), pm)
summary(pm)
anova(glm(jk ~ 1, data = dataku, family = 'poisson'), pm)
anova(glm(jk ~ 1, data = dataku, family = 'poisson'), pm, test = 'LRT')
dat <- foreign::read.dta("http://www.ats.ucla.edu/stat/data/ologit.dta")
dat <- foreign::read.dta("http://www.ats.ucla.edu/stat/data/ologit.dta")
dat <- foreign::read.dta("http://www.ats.ucla.edu/stat/data/ologit.dta")
lmtest::lrtest(pm)
anova(glm(jk ~ 1, data = dataku, family = 'poisson'), pm, test = 'LRT')
dat <- foreign::read.dta("http://www.ats.ucla.edu/stat/data/ologit.dta")
summary(m)
dat <- foreign::read.dta("http://www.ats.ucla.edu/stat/data/ologit.dta")
dat <- foreign::read.dta("http://www.ats.ucla.edu/stat/data/ologit.dta")
dat <- foreign::read.dta("http://www.ats.ucla.edu/stat/data/ologit.dta")
dat <- foreign::read.dta("http://www.ats.ucla.edu/stat/data/ologit.dta")
dat <- foreign::read.dta("http://www.ats.ucla.edu/stat/data/ologit.dta")
dat <- foreign::read.dta("C:/Users/Ridson Alfarizal/Downloads/ologit.dta")
m <- polr(apply ~ public + pared, data = dat, Hess=TRUE)
summary(m)
dat
dat %>%
mutate_at(
-ncol(.), ~ factor(.x, levels = rev(unique(.x)))
)
unique(dat$apply)
unique(dat$pared)
unique(dat$public)
dat %>%
mutate_at(
-ncol(.), ~ fct_rev(.x)
)
dat %>%
mutate_at(2:3, ~ factor(.x, levels = c(1, 0))) %>%
mutate_at(1, ~ fct_rev(.x))
dat %>%
mutate_at(2:3, ~ factor(.x, levels = c(1, 0))) %>%
mutate_at(1, ~ fct_rev(.x)) %>%
glimpse()
dat %>%
mutate_at(2:3, ~ factor(.x, levels = c(1, 0))) %>%
mutate_at(1, ~ fct_rev(.x)) %>%
str()
dat <- dat %>%
mutate_at(2:3, ~ factor(.x, levels = c(1, 0))) %>%
mutate_at(1, ~ fct_rev(.x))
m <- polr(apply ~ public + pared, data = dat, Hess=TRUE)
summary(m)
m <- polr(apply ~ public + pared + gpa, data = dat, Hess=TRUE)
summary(m)
dat <- foreign::read.dta("C:/Users/Ridson Alfarizal/Downloads/ologit.dta")
m <- polr(apply ~ public + pared + gpa, data = dat, Hess=TRUE)
summary(m)
dat <- dat %>%
mutate_at(2:3, ~ factor(.x, levels = c(0, 1)))
# Pakai urutan level 0 1 2 (default aja)
m <- polr(apply ~ public + pared + gpa, data = dat, Hess=TRUE)
summary(m)
df_mi <-
data.frame(mi = mental_impairment, ses, life_events) %>%
mutate(
mi = factor(mi, levels = unique(mi)),
ses = factor(ses, levels = c(0, 1))
)
df_mi$mi
df_mi
m <- polr(mi ~ ses + life_events, df_mi, Hess = T, model = T)
summary(m)
logitgof(df_mi$mi, fitted(m), ord = TRUE, g = 10)
logitgof(df_mi$mi, fitted(m), ord = TRUE, g = 19)
logitgof(df_mi$mi, fitted(m), ord = TRUE, g = 18)
logitgof(df_mi$mi, fitted(m), ord = TRUE, g = 19)
summary(m)
logLik(m)
# Ho : Garis regresi pararel (Model menghasilkan koefisien regresi (slope) yang sama)
brant::brant(m)
predict(m, df_mi, type = 'prob')[1,]
1/(1 + exp(-(m$zeta + sum(coef(m)*c(1, 1)))))
1/(1 + exp(-(m$zeta[1] + sum(coef(m)*c(1, 1)))))
df_mi[1,]
a <- (1 / (1 + exp(-(m$zeta[1] + sum(coef(m) * c(1, 1) )))))
a
b <- (1 / (1 + exp(-(m$zeta[2] + sum(coef(m) * c(1, 1) ))))) - a
b
c <- (1 / (1 + exp(-(m$zeta[3] + sum(coef(m) * c(1, 1) ))))) - a - b
c
c(a, b, c, 1-a-b-c)
predict(m, df_mi, type = 'prob')[1,]
nbm <- glm.nb(jk ~ rb + kp + tk, data = dataku)
lrtest(pm, nbm)
summary(nbm)
summary(pm)
lrtest(pm, nbm)
m <- polr(apply ~ public + pared + gpa, data = dat, Hess=TRUE)
summary(m)
logLik(m)
deviance(m)
foreign::read.spss('D:/__SEMESTER 5/Data-UASADK01-2021.sav')
foreign::read.spss('D:/__SEMESTER 5/Data-UASADK01-2021.sav',
to.data.frame = T)
dat <- foreign::read.spss('D:/__SEMESTER 5/Data-UASADK01-2021.sav',
to.data.frame = T)
unique(dat$Y)
m
lrtest(m)
m <- polr(apply ~ public + pared + gpa, data = dat, Hess=TRUE)
summary(m)
lrtest(m)
qchisq(0.05, 2, lower.tail = F)
dat <- foreign::read.dta("C:/Users/Ridson Alfarizal/Downloads/ologit.dta")
dataaa <- foreign::read.dta("C:/Users/Ridson Alfarizal/Downloads/ologit.dta")
m <- polr(apply ~ public + pared + gpa, data = dataaa, Hess=TRUE)
summary(m)
m <- polr(apply ~ public + pared, data = dataaa, Hess=TRUE)
m <- polr(apply ~ public + pared, data = dataaa, Hess=TRUE)
m2 <- polr(apply ~ (public + pared)^2, data = dataaa, Hess=TRUE)
lrtest(m, m2)
dat
dat <- foreign::read.spss('D:/__SEMESTER 5/Data-UASADK01-2021.sav',
to.data.frame = T)
unique(dat$Y)
dat
polr(Y~., data = dat)
nnet::multinom(Y~., data = dat)
glm(Y~., data = dat, family = binomial())
m <- glm(Y~., data = dat, family = binomial())
summary(m)
str(dat)
head(dat)
dat %>%
mutate_all(.x, ~ fct_rev(.x))
dat %>%
mutate_all(~ fct_rev(.x))
str(dat)
head(dat)
dat %>%
mutate_all(~ fct_rev(.x))
dat %>%
mutate_at(-2, ~ fct_rev(.x))
dat <- dat %>%
mutate_at(-2, ~ fct_rev(.x))
m <- glm(Y~., data = dat, family = binomial())
summary(m)
str(dat)
m <- glm((Y=='Miskin')~., data = dat, family = binomial())
summary(m)
m <- glm(Y~., data = dat, family = binomial())
summary(m)
exp(coef(m))
# Pseudo R2 ---------------------------------------------------------------
DescTools::PseudoR2(mb, c('CoxSnell', 'Nagelkerke', 'McFadden'))
# Pseudo R2 ---------------------------------------------------------------
DescTools::PseudoR2(m, c('CoxSnell', 'Nagelkerke', 'McFadden'))
# Ho : Model fit dengan data
ResourceSelection::hoslem.test(m$y, m$fitted.values)
m$y
# Ho : Model fit dengan data
ResourceSelection::hoslem.test(m$y, m$fitted.values)
summary(m)
coef(m'')
coef(m)
coef(m)[-X1]
coef(m)[-'X1']
coef(m)[-2]
coef(m)[-2]*c(1, 1, 0, 0, 0, 1, 1)
sum(coef(m)[-2]*c(1, 1, 0, 0, 0, 1, 1))
predict(m, type = 'prob')
predict(m, type = 'respo')
sum(coef(m)[-2]*c(1, 1, 0, 0, 0, 1, 1))
exp(sum(coef(m)[-2]*c(1, 1, 0, 0, 0, 1, 1)))
0.5/0.5
1-0.09151875
0.9084813/coef(m)[2]
data.frame(c(1, 1, 0, 0, 0, 1, 1))
data.frame(22.95, 1, 0, 0, 0, 1, 1)
predict(m,
data.frame(22.95, 1, 0, 0, 0, 1, 1),
type = 'respo')
coef(m)
dat
m <- glm((Y=='Miskin')~., data = dat, family = binomial())
summary(m)
sum(-coef(m)[-2]*c(1, 1, 0, 0, 0, 1, 1))
exp(sum(coef(m)[-2]*c(1, 1, 0, 0, 0, 1, 1)))
x <- sum(-coef(m)[-2]*c(1, 1, 0, 0, 0, 1, 1))
exp(x)
# Pseudo R2 ---------------------------------------------------------------
DescTools::PseudoR2(m, c('CoxSnell', 'Nagelkerke', 'McFadden'))
x <- sum(coef(m)[-2]*c(1, 1, 0, 0, 0, 1, 1))
exp(x)
1-exp(x)
-9.926722/coef(m)[2]
coef(m)
x <- sum(coef(m)[-2]*c(1, 1, 0, 0, 0, 1, 1))
exp(x)
1-exp(x)
coef(m)
(1-exp(x))/-0.03958047
m <- glm((Y=='Miskin')~., data = dat, family = binomial())
summary(m)
x <- sum(coef(m)[-2]*c(1, 1, 0, 0, 0, 1, 1))
exp(x)
exp(0.5)
log(0.5)
x
x
log(0.5) - x
(log(0.5) - x)/coef(m)[2]
head(dat)
data.frame(
X1 = 73,
X2 = 'Minimal SMA',
X3 = 'Perempuan',
X4 = 'Tidak Bekerja',
X5 = 'Maksimum 4',
X6 = 'Menabung'
)
newdata <-
data.frame(
X1 = 73,
X2 = 'Minimal SMA',
X3 = 'Perempuan',
X4 = 'Tidak Bekerja',
X5 = 'Maksimum 4',
X6 = 'Menabung'
)
newdata
predict(m, newdata)
predict(m, newdata, type = 'resp')
m
newdata <-
data.frame(
X1 = 73,
X2 = 'Minimal SMA',
X3 = 'Perempuan',
X4 = 'Tidak Bekerja',
X5 = 'Maksimum 4',
X6 = 'Menabung'
)
predict(m, newdata, type = 'resp')
(log(1) - x)/coef(m)[2]
log(1)
newdata <-
data.frame(
X1 = 60,
X2 = 'Minimal SMA',
X3 = 'Perempuan',
X4 = 'Tidak Bekerja',
X5 = 'Maksimum 4',
X6 = 'Menabung'
)
newdata
predict(m, newdata, type = 'resp')
newdata <-
data.frame(
X1 = 70,
X2 = 'Minimal SMA',
X3 = 'Perempuan',
X4 = 'Tidak Bekerja',
X5 = 'Maksimum 4',
X6 = 'Menabung'
)
newdata
predict(m, newdata, type = 'resp')
newdata <-
data.frame(
X1 = 60,
X2 = 'Minimal SMA',
X3 = 'Perempuan',
X4 = 'Tidak Bekerja',
X5 = 'Maksimum 4',
X6 = 'Menabung'
)
newdata
predict(m, newdata, type = 'resp')
(log(1) - x)/coef(m)[2]
newdata <-
data.frame(
X1 = 60.41392,
X2 = 'Minimal SMA',
X3 = 'Perempuan',
X4 = 'Tidak Bekerja',
X5 = 'Maksimum 4',
X6 = 'Menabung'
)
newdata
predict(m, newdata, type = 'resp')
is.null(NULL)
s <- '\\s(angka)\\s(nonangka)'
gsub('angka', '(-*\\d*,*\\.*\\d*|\\d*)', s, ignore.case = T)
gsub('(angka', '(-*\\d*,*\\.*\\d*|\\d*)', s, ignore.case = T)
gsub('\\(angka', '(-*\\d*,*\\.*\\d*|\\d*)', s, ignore.case = T)
gsub('\\(\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', s, ignore.case = T)
s <- '\\s( angka)\\s(nonangka)\\s(angka)'
gsub('\\(\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', s, ignore.case = T)
s <- '\\s( angka)\\s(nonangka)\\s(angka)\\s(non_angka)'
gsub('\\(\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', s, ignore.case = T)
gsub('\\(\\s*non_*angka', '(-*\\d*,*\\.*\\d*|\\d*)', s, ignore.case = T)
s <- '\\s( angka)\\s(nonangka)\\s(angka)\\s(non_angka)(non angka)'
gsub('\\(\\s*non_*angka', '(-*\\d*,*\\.*\\d*|\\d*)', s, ignore.case = T)
gsub('\\(\\s*non_*\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', s, ignore.case = T)
is.null(NULL + NULL)
NULL + NULL
is.null(NULL) + is.null(NULL)
is.null(1) + is.null(1)
is.numeric(c(1, 2))
T+T
glm
F+F
warning('aa')
warning('Silahkan isi `pos_non_angka` dan `pos_angka` dengan vector. jika anda ingin custom silakan isi pattern dan biarkan kosong `pos_non_angka` dan `pos_angka`')
read_string <- function(
# parameter
s, pos_non_angka = NULL, pos_angka = NULL,
col_names = paste0('v', 1:length(c(non_angka, angka))),
sep = '\\s',
pattern = NULL
...
){
args <- is.numeric(pos_non_angka)+is.numeric(pos_angka)
# Function
if(is.null(pattern) & args == 2){
pattern <- c()
pattern[pos_angka] <- '(-*\\d*,*\\.*\\d*|\\d*)'
pattern[pos_non_angka] <- '(\\D*)'
pattern <- paste0(pattern, collapse = sep)
}else if(!is.null(pattern) & args == 0){
pattern <- gsub('\\(\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
pattern <- gsub('\\(\\s*non_*\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
}else(
warning('Silahkan isi `pos_non_angka` dan `pos_angka` dengan vector. jika anda ingin custom silakan isi pattern dan biarkan kosong `pos_non_angka` dan `pos_angka`')
)
tidyr::extract(
data.frame(st = stringr::str_split(s, pattern = '\\n')[[1]]),
col = st, into = col_names, regex = pattern
)
}
read_string <- function(
# parameter
s, pos_non_angka = NULL, pos_angka = NULL,
col_names = paste0('v', 1:length(c(non_angka, angka))),
sep = '\\s',
pattern = NULL
...
){
args <- is.numeric(pos_non_angka)+is.numeric(pos_angka)
# Function
if(is.null(pattern) & args == 2){
pattern <- c()
pattern[pos_angka] <- '(-*\\d*,*\\.*\\d*|\\d*)'
pattern[pos_non_angka] <- '(\\D*)'
pattern <- paste0(pattern, collapse = sep)
}else if(!is.null(pattern) & args == 0){
pattern <- gsub('\\(\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
pattern <- gsub('\\(\\s*non_*\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
}else(
warning('Silahkan isi `pos_non_angka` dan `pos_angka` dengan vector. jika anda ingin custom silakan isi pattern dan biarkan kosong `pos_non_angka` dan `pos_angka`')
)
tidyr::extract(
data.frame(st = stringr::str_split(s, pattern = '\\n')[[1]]),
col = st, into = col_names, regex = pattern
)
}
read_string <- function(
# parameter
s, pos_non_angka = NULL, pos_angka = NULL,
col_names = paste0('v', 1:length(c(non_angka, angka))),
sep = '\\s',
pattern = NULL
...
){
args <- is.numeric(pos_non_angka)+is.numeric(pos_angka)
# Function
if(is.null(pattern) & args == 2){
pattern <- c()
pattern[pos_angka] <- '(-*\\d*,*\\.*\\d*|\\d*)'
pattern[pos_non_angka] <- '(\\D*)'
pattern <- paste0(pattern, collapse = sep)
}else if(!is.null(pattern) & args == 0){
pattern <- gsub('\\(\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
pattern <- gsub('\\(\\s*non_*\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
}else{
warning('Silahkan isi `pos_non_angka` dan `pos_angka` dengan vector. jika anda ingin custom silakan isi pattern dan biarkan kosong `pos_non_angka` dan `pos_angka`')
}
tidyr::extract(
data.frame(st = stringr::str_split(s, pattern = '\\n')[[1]]),
col = st, into = col_names, regex = pattern
)
}
read_string <- function(
# parameter
s, pos_non_angka = NULL, pos_angka = NULL,
col_names = paste0('v', 1:length(c(non_angka, angka))),
sep = '\\s',
pattern = NULL
...
){
args <- is.numeric(pos_non_angka)+is.numeric(pos_angka)
# Function
if(is.null(pattern) & args == 2){
pattern <- c()
pattern[pos_angka] <- '(-*\\d*,*\\.*\\d*|\\d*)'
pattern[pos_non_angka] <- '(\\D*)'
pattern <- paste0(pattern, collapse = sep)
}else if(!is.null(pattern) & args == 0){
pattern <- gsub('\\(\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
pattern <- gsub('\\(\\s*non_*\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
}else{
warning('Silahkan isi `pos_non_angka` dan `pos_angka` dengan vector. jika anda ingin custom silakan isi pattern dan biarkan kosong `pos_non_angka` dan `pos_angka`')
}
tidyr::extract(
data.frame(st = stringr::str_split(s, pattern = '\\n')[[1]]),
col = st, into = col_names, regex = pattern
)
}
read_string <- function(
# parameter
s, pos_non_angka = NULL, pos_angka = NULL,
col_names = paste0('v', 1:length(c(non_angka, angka))),
sep = '\\s',
pattern = NULL
...
){
args <- is.numeric(pos_non_angka)+is.numeric(pos_angka)
# Function
if(is.null(pattern) & args == 2){
pattern <- c()
pattern[pos_angka] <- '(-*\\d*,*\\.*\\d*|\\d*)'
pattern[pos_non_angka] <- '(\\D*)'
pattern <- paste0(pattern, collapse = sep)
}else if(!is.null(pattern) & args == 0){
pattern <- gsub('\\(\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
pattern <- gsub('\\(\\s*non_*\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
}else{
warning('Silahkan isi `pos_non_angka` dan `pos_angka` dengan vector. jika anda ingin custom silakan isi `pattern` dan biarkan kosong `pos_non_angka` dan `pos_angka`')
}
tidyr::extract(
data.frame(st = stringr::str_split(s, pattern = '\\n')[[1]]),
col = st, into = col_names, regex = pattern
)
}
read_string <- function(
# parameter
s, pos_non_angka = NULL, pos_angka = NULL,
col_names = paste0('v', 1:length(c(non_angka, angka))),
sep = '\\s',
pattern = NULL
...
){
args <- is.numeric(pos_non_angka)+is.numeric(pos_angka)
# Function
if(is.null(pattern) & args == 2){
pattern <- c()
pattern[pos_angka] <- '(-*\\d*,*\\.*\\d*|\\d*)'
pattern[pos_non_angka] <- '(\\D*)'
pattern <- paste0(pattern, collapse = sep)
}else if(!is.null(pattern) & args == 0){
pattern <- gsub('\\(\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
pattern <- gsub('\\(\\s*non_*\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
}else{
#warning('Silahkan isi `pos_non_angka` dan `pos_angka` dengan vector. jika anda ingin custom silakan isi `pattern` dan biarkan kosong `pos_non_angka` dan `pos_angka`')
}
tidyr::extract(
data.frame(st = stringr::str_split(s, pattern = '\\n')[[1]]),
col = st, into = col_names, regex = pattern
)
}
read_string <- function(
# parameter
s, pos_non_angka = NULL, pos_angka = NULL,
col_names = paste0('v', 1:length(c(non_angka, angka))),
sep = '\\s',
pattern = NULL
...
){
args <- is.numeric(pos_non_angka)+is.numeric(pos_angka)
# Function
if(is.null(pattern) & args == 2){
pattern <- c()
pattern[pos_angka] <- '(-*\\d*,*\\.*\\d*|\\d*)'
pattern[pos_non_angka] <- '(\\D*)'
pattern <- paste0(pattern, collapse = sep)
}else if(!is.null(pattern) & args == 0){
pattern <- gsub('\\(\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
pattern <- gsub('\\(\\s*non_*\\s*angka', '(-*\\d*,*\\.*\\d*|\\d*)', pattern, ignore.case = T)
}else{
#warning('Silahkan isi `pos_non_angka` dan `pos_angka` dengan vector. jika anda ingin custom silakan isi `pattern` dan biarkan kosong `pos_non_angka` dan `pos_angka`')
}
tidyr::extract(
data.frame(st = stringr::str_split(s, pattern = '\\n')[[1]]),
col = st, into = col_names, regex = pattern
)
}
dm::copy2c
dm::read_pattern
