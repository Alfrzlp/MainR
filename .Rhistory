V12
# R (atau rho, matriks korelasi)
# R = (V^1/2)^-1 sigma (V^1/2)^-1
(R <- solve(V12) %*% A %*% solve(V12))
# check
V12 %*% P %*% V12
# check
V12 %*% R %*% V12
# 2.41 --------------------------------------------------------------------
diag(3, nrow = 4)
# 2.41 --------------------------------------------------------------------
S_x <- diag(3, nrow = 4)
miu_x <- c(3, 2, -1, 0)
A <- matrix(c(1, -1, 0, 0, 1, 1, -2, 0, 1, 1, 1, -3), nrow = 3, byrow = T)
A
# E(AX) = A E(X)
A %*% matrix(miu_x, ncol = 1)
# Cov(AX) = A'Cov(X)A
t(A) %*% S_x %*% A
# Cov(AX) = A'Cov(X)A
A %*% S_x %*% t(A)
matrix(1, nrow = 4, ncol = 4)
`diag<-`(matrix(1, nrow = 4, ncol = 4), 3)
# 2.42 --------------------------------------------------------------------
S_x <- `diag<-`(matrix(1, nrow = 4, ncol = 4), 3)
miu_x <- c(3, 2, -1, 0)
A <- matrix(c(1, -1, 0, 0, 1, 1, -2, 0, 1, 1, 1, -3), nrow = 3, byrow = T)
# E(AX) = A E(X)
A %*% matrix(miu_x, ncol = 1)
# Cov(AX) = A Cov(X) A'
A %*% S_x %*% t(A)
# 2.41 --------------------------------------------------------------------
S_x <- diag(3, nrow = 4)
# Cov(AX) = A Cov(X) A'
A %*% S_x %*% t(A)
# 2.42 --------------------------------------------------------------------
S_x <- `diag<-`(matrix(1, nrow = 4, ncol = nrow), 3)
# 2.42 --------------------------------------------------------------------
S_x <- `diag<-`(matrix(1, nrow = 4), 3)
S_x
# 2.42 --------------------------------------------------------------------
S_x <- `diag<-`(matrix(1, nrow = 4, ncol = 4), 3)
S_x
# 2.32 --------------------------------------------------------------------
miu_x <- c(2, 4, -1, 3, 0)
S_x <- matrix(c(4, -1, 1/2, -1/2, 0,
-1, 3, 1, -1, 0,
1/2, 1, 6, 1, -1,
-1/2, -1, 1, 4, 0,
0, 0, -1, 0, 2),
nrow = 5)
A <- matrix(c(1, -1, 1, 1), nrow = 2)
B <- matrix(c(1, 1, 1, 1, 1, -2), nrow = 2)
miu_x
S_x
A
B
library(readxl)
# Data --------------------------------------------------------------------
imunisasi <- read_excel('D:/RKD2018_imunisasi.xlsx')
head(imunisasi)
# Matrix (n x p) ----------------------------------------------------------
A <- unname(as.matrix(imunisasi[, -1]))
A
# vektor rata-rata --------------------------------------------------------
colMeans(A)
# matriks ragam-peragam ---------------------------------------------------
# yang berada pada diagonal merupakan varians,
# dan elemen matriks yang lain merupakan covarians
var(A)
# matriks korelasi --------------------------------------------------------
cor(A)
S <- matrix(c(25, -2, 4, -2, 4, 1, 1, 9), nrow = 3, byrow = T)
S
S <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), nrow = 3, byrow = T)
S
S <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), nrow = 3, byrow = T)
S
# Matriks Korelasinya
# R = V^-1/2 * S * V^-1/2
v12 = diag(sqrt(diag(S)))
R = v12 %*% S %*% v12
R
# Matriks Korelasinya
# R = V^-1/2 * S * V^-1/2
v12 = diag(sqrt(diag(S)))
R = v12 %*% S %*% v12
R
(R <- solve(v12) %*% S %*% solve(v12))
MASS::fractions(R)
# buktikan bahwa S = sigma lambda ei ei'
eigen(S)
eigen(S)$vector
eigen(S)$vector %>%
as.list()
eigenvector <- eigen(S)$vector
eigenvector[,1]
as.matrix(eigenvector[,1], ncol = 1)
apply(eigenvector, 2, function(x) as.matrix(x, ncol = 1))
apply(eigenvector, 2, function(x) as.matrix(x, ncol = 1)) %>% as.list()
apply(eigenvector, 1, function(x) as.matrix(x, ncol = 1))
sapply(eigenvector, 1, function(x) as.matrix(x, ncol = 1))
lapply(eigenvector, 1, function(x) as.matrix(x, ncol = 1))
lapply(eigenvector, function(x) as.matrix(x, ncol = 1))
lapply(seq_len(ncol(eigenvector)), function(i) x[,i])
eigenvector <- eigen(S)$vector
lapply(seq_len(ncol(eigenvector)), function(i) x[,i])
lapply(seq_len(ncol(eigenvector)), function(i) eigenvector[,i])
lapply(seq_len(ncol(eigenvector)), function(i) as.matrix(eigenvector[,i], ncol = 1))
seq_len(ncol(eigenvector))
lapply(1:ncol(eigenvector), function(i) as.matrix(eigenvector[,i], ncol = 1))
eigenvector <- lapply(1:ncol(eigenvector), function(i) as.matrix(eigenvector[,i], ncol = 1))
eigenvector
eigenvector[[1]]
lambda * eigenvector[[1]] %*% t(eigenvector[[1]])
lambda[1] * eigenvector[[1]] %*% t(eigenvector[[1]])
eigenvector <- eigen(S)$vector
lambda[1] * eigenvector[[1]] %*% t(eigenvector[[1]])
lambda[1] * eigenvector[[1]] %*% t(eigenvector[[1]])
lambda[1] * (eigenvector[[1]] %*% t(eigenvector[[1]]))
lambda[1]
# buktikan bahwa S = sigma lambda ei ei'
lambda <- eigen(S)$values
eigenvector <- eigen(S)$vector
eigenvector <- lapply(1:ncol(eigenvector), function(i) as.matrix(eigenvector[,i], ncol = 1))
lambda[1] * (eigenvector[[1]] %*% t(eigenvector[[1]]))
lambda[1] * (eigenvector[[1]] %*% t(eigenvector[[1]])) +
lambda[2] * (eigenvector[[2]] %*% t(eigenvector[[2]])) +
lambda[3] * (eigenvector[[3]] %*% t(eigenvector[[3]]))
lambda[1] * (eigenvector[[1]] %*% t(eigenvector[[1]])) +
lambda[2] * (eigenvector[[2]] %*% t(eigenvector[[2]])) +
lambda[3] * (eigenvector[[3]] %*% t(eigenvector[[3]]))
hasil <- lambda[1] * (eigenvector[[1]] %*% t(eigenvector[[1]])) +
lambda[2] * (eigenvector[[2]] %*% t(eigenvector[[2]])) +
lambda[3] * (eigenvector[[3]] %*% t(eigenvector[[3]]))
hasil
hasil == S
S <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), nrow = 3, byrow = T)
S
hasil == S
hasil
hasil == S
hasil
S
hasil == S
# buktikan bahwa S^1/2 = sigma sqrt(lambda) ei ei'
hasil <- sqrt(lambda[1]) * (eigenvector[[1]] %*% t(eigenvector[[1]])) +
sqrt(lambda[2]) * (eigenvector[[2]] %*% t(eigenvector[[2]])) +
sqrt(lambda[3]) * (eigenvector[[3]] %*% t(eigenvector[[3]]))
hasil
sqrt(S)
S
MASS::fractions(hasil)
hasil
class(S)
class(hasil)
hasil
hasil <- lambda[1] * (eigenvector[[1]] %*% t(eigenvector[[1]])) +
lambda[2] * (eigenvector[[2]] %*% t(eigenvector[[2]])) +
lambda[3] * (eigenvector[[3]] %*% t(eigenvector[[3]]))
hasil
S
hasil == S
hasil <- NULL
for (i in 1:length(lambda)) {
hasil <- hasil + lambda[i] * (eigenvector[[i]] %*% t(eigenvector[[i]]))
}
hasil
hasil <- 0
for (i in 1:length(lambda)) {
hasil <- hasil + lambda[i] * (eigenvector[[i]] %*% t(eigenvector[[i]]))
}
hasil
hasil
S
identical(hasil, S)
# buktikan bahwa S^1/2 = sigma sqrt(lambda) ei ei'
hasil2 <- 0
# buktikan bahwa S^1/2 = sigma sqrt(lambda) ei ei'
hasil2 <- 0
for (i in 1:length(lambda)) {
hasil2 <- hasil2 + sqrt(lambda[i]) * (eigenvector[[i]] %*% t(eigenvector[[i]]))
}
hasil2
v12 %*% R %*% v12
R
sqrt(R)
S^1/2
S^(1/2)
hasil2
source("~/MainR/all/APG/Responsi 240222.R", echo=TRUE)
source("~/MainR/all/APG/Responsi 240222.R")
hasil
hasil2
sqrtm(S)
expm::sqrtm(S)
# terbukti
typeof(hasil)
typeof(S)
# terbukti
hasil == S
# buktikan bahwa S^1/2 = sigma sqrt(lambda) ei ei'
hasil2 <- 0
hasil
S
# terbukti
hasil == S
identical(hasil, S)
class(hasil)
class(S)
typeof(hasil)
typeof(S)
all.equal(hasil, S)
all.equal(hasil2, expm::sqrtm(S))
expm::sqrtm(S)
hasil2
# buktikan bahwa S^1/2 = sigma sqrt(lambda) ei ei'
hasil2 <- 0
for (i in 1:length(lambda)) {
hasil2 <- hasil2 + sqrt(lambda[i]) * (eigenvector[[i]] %*% t(eigenvector[[i]]))
}
hasil2
expm::sqrtm(S)
all.equal(hasil2, expm::sqrtm(S))
x1 <- 3*c(1, 1, 1)
y1 - x1
# 3.3 ---------------------------------------------------------------------
y1 <- c(1, 4, 4)
x1 <- 3*c(1, 1, 1)
y1 - x1
x1 + (y1 - x1)
# 3.5 ---------------------------------------------------------------------
# generalized variance
(X <- matrix(c(9, 1, 5, 3, 1, 2), nrow = 3, byrow = T))
X - colSums(X)
colSums(X)
X - colMeans(X)
cov(X)
det(cov(X))
colMeans(X)
X
X - colMeans(X)
(X <- matrix(c(3, 4, 6, -2, 3, 1), nrow = 3, byrow = T))
cov(X)
det(cov(X))
# 3.5 ---------------------------------------------------------------------
# generalized sample variance |S|
(X <- matrix(c(9, 1, 5, 3, 1, 2), nrow = 3, byrow = T))
X
X - colMeans(X)
matrix(colMeans(X), 3)
matrix(colMeans(X), nrow  = 3)
X - matrix(colMeans(X), nrow  = 3, ncol = 2, byrow = T)
X - matrix(colMeans(X), nrow  = nrow(X), ncol = ncol(X), byrow = T)
# 3.6 ---------------------------------------------------------------------
(X <- matrix(c(-1, 3, -2, 2, 4, 2, 5, 2, 3), nrow = 3, byrow = T))
# a. matrix deviasi (residual), X-1xbar apakah full rank
colMeans(X)
X - matrix(colMeans(X), nrow  = nrow(X), ncol = ncol(X), byrow = T)
# b. Hitung S dan generalized sample variance |S|
cov(X)
det(cov(X))
# c. Total sample variance
# Sigma Sii
sum(diag(cov(X)))
d <- X - matrix(colMeans(X), nrow  = nrow(X), ncol = ncol(X), byrow = T)
d
t(d)
as.data.frame(t(d))
as.data.frame(t(d), colnames = c('x', 'y', ;z))
as.data.frame(t(d), colnames = c('x', 'y', 'z'))
as.data.frame(t(d), col_names = c('x', 'y', 'z'))
as.data.frame(t(d), col_name = c('x', 'y', 'z'))
as.data.frame(t(d), col_names = c('x', 'y', 'z'))
as.data.frame(t(d)) %>%
`colnames<-`(c('x', 'y', 'z'))
dat <-
as.data.frame(t(d)) %>%
`colnames<-`(c('x', 'y', 'z'))
plot3d(
x = dat$x, y = dat$y, z = dat$z,
col = 'orange',
type = 's',
radius = 0.3,
xlab = "X", ylab = "Y", zlab = "Z", box = F)
library(plotly)
plot_ly(x = d[1,], y = d[2,], z = d[3,],
type="scatter3d", mode="lines+markers")
plot_ly(x = d[1,], y = d[2,], z = d[3,],
type="surface", mode="lines+markers")
plot_ly(x = d[1,], y = d[2,], z = d[3,],
type="surfacecolor", mode="lines+markers")
plot_ly(x = d[1,], y = d[2,], z = d[3,],
type="scattergeo", mode="lines+markers")
plot_ly(x = d[1,], y = d[2,], z = d[3,],
type="vulcano", mode="lines+markers")
plot_ly(x = d[1,], y = d[2,], z = d[3,],
type="scatter3d", mode="lines+markers")
dm::read_pattern
s <- 'Aceh 53,9 50,7 26,9 24,9 22,0 25,9 37,9 464
Sumatera Utara 62,7 75,8 44,3 43,1 39,2 47,1 65,4 1.068
Sumatera Barat 76,2 81,2 53,7 51,4 45,4 50,5 63,9 419
Riau 74,8 79,6 40,7 39,3 36,7 45,8 68,6 528
Jambi 84,7 86,3 63,7 62,9 60,5 69,0 80,3 268
Sumatera Selatan 79,7 85,8 54,1 53,3 51,1 59,7 78,4 607
Bengkulu 81,1 88,1 68,2 68,4 67,6 72,6 85,1 137
Lampung 84,9 90,7 72,0 71,2 70,1 79,4 83,0 602
Bangka Belitung 88,9 87,7 73,5 72,4 72,0 80,4 81,9 103
Kepulauan Riau 92,7 89,6 79,7 76,0 74,9 77,9 80,0 185
DKI Jakarta 97,2 97,4 77,9 76,9 72,9 78,4 82,1 688
Jawa Barat 86,7 89,7 66,7 65,3 61,9 67,8 78,1 3.184
Jawa Tengah 94,3 94,8 80,3 79,2 77,1 82,6 86,6 2.003
DI Yogyakarta 97,8 99,2 91,0 91,0 91,0 86,9 96,9 228
Jawa Timur 92,1 92,4 75,2 73,7 72,0 76,8 82,8 2.293
Banten 76,6 79,7 58,4 54,8 52,6 57,0 63,8 875
Bali 99,5 98,0 90,8 90,8 90,6 96,0 94,4 237
Nusa Tenggara Barat 90,7 94,0 71,0 71,1 69,2 78,2 87,9 393
Nusa Tenggara Timur 78,6 86,8 49,7 48,5 46,8 65,5 82,5 493
Kalimantan Barat 71,2 77,6 68,2 66,5 61,9 60,3 68,1 388
Kalimantan Tengah 68,4 76,0 60,1 57,9 54,2 56,4 67,0 198
Kalimantan Selatan 86,8 88,7 73,2 70,9 68,6 76,1 81,0 338
Kalimantan Timur 87,1 92,2 75,0 72,8 71,6 80,9 84,1 302
Kalimantan Utara 90,3 93,9 78,2 77,2 75,2 84,8 85,4 63
Sulawesi Utara 81,2 91,9 64,0 62,7 61,8 71,3 84,1 154
Sulawesi Tengah 74,3 80,7 60,0 56,2 53,3 61,2 75,7 250
Sulawesi Selatan 86,5 86,9 67,2 65,8 63,7 69,8 79,8 660
Sulawesi Tenggara 68,1 84,5 54,6 53,6 49,8 59,8 80,2 223
Gorontalo 87,1 91,4 69,2 66,9 66,3 72,8 81,3 93
Sulawesi Barat 78,7 82,6 65,6 63,9 56,9 64,2 75,3 124
Maluku 52,1 75,8 46,3 45,4 42,8 51,9 68,9 165
Maluku Utara 68,9 75,8 54,6 52,0 48,8 50,2 66,0 106
Papua Barat 68,7 75,6 55,0 52,4 50,7 55,3 73,0 83
Papua 42,0 62,5 37,0 36,0 34,0 39,7 60,7 245'
dm::read_pattern(
s, pos_non_angka = 1,
pos_angka = c(2:9)
)
dm::read_pattern(
s, pos_non_angka = 1,
pos_angka = c(2:9)
) %>%
glimpse()
data.frame(NULL)
data.frame(a = NULL)
data.frame(a = c(NULL, 1))
NAN
NaN
data.frame(a = c(NaN, 1))
data.frame(a = c(NAN, 1))
data.frame(a = c(NaN, 1))
read_pattern <- function (s, pos_non_angka = NULL, pos_angka = NULL,
col_names = paste0("v", 1:length(c(pos_non_angka, pos_angka))), sep = "\\s",
pattern = NULL, ...)
{
args <- is.numeric(pos_non_angka) + is.numeric(pos_angka)
ak <- "(-*\\d*,*\\.*\\d*|\\d*)"
non_ak <- "(\\X*)"
if (is.null(pattern) & args == 2) {
pattern <- c()
pattern[pos_angka] <- ak
pattern[pos_non_angka] <- non_ak
pattern <- paste0(pattern, collapse = sep)
}
else if (!is.null(pattern) & args == 0) {
pattern <- gsub("(?<=\\()\\s*angka", "-*\\\\d*,*\\\\.*\\\\d*|\\\\d*",
pattern, ignore.case = T, perl = T)
pattern <- gsub("(?<=\\()\\s*non_*\\s*angka", "\\\\X*",
pattern, ignore.case = T, perl = T)
}
else {
warning("Silahkan isi `pos_non_angka` dan `pos_angka` dengan numeric vector. jika anda ingin custom silakan isi `pattern` dan biarkan kosong `pos_non_angka` dan `pos_angka`")
}
tidyr::extract(data.frame(st = stringr::str_split(s, pattern = "\\n")[[1]]),
col = 1, into = col_names, regex = pattern, ...)
}
str_extract('-1 -0.1 1', '(-*\\d*,*\\.*\\d*|\\d*|NA|NaN)')
str_extract_all('-1 -0.1 1', '(-*\\d*,*\\.*\\d*|\\d*|NA|NaN)')
str_extract_all('-1 -0.1 1,1',
'(-*\\d*,*\\.*\\d*|\\d*|NA|NaN)')
str_extract_all('-1 -0.1 1,1 NA',
'(-*\\d*,*\\.*\\d*|\\d*|NA|NaN)')
str_extract_all('-1 -0.1 1,1 NA',
'(-*\\d*,*\\.*\\d*|\\d*|NA*|NaN)')
cat("This is how", crayon::red("Red"), "looks.\n")
crayon::bgCyan('aa')
cat(crayon::bgCyan('aa'))
crayon::cyan('a') %>% cat()
crayon::magenta('a') %>% cat()
library(crayon)
cat(crayon::bgCyan(black('aaaa')))
cat(crayon::bgBlue('aaaa'))
cat(crayon::bgGreen('aaaa'))
cat(crayon::bgMagenta('aaaa'))
cat(crayon::bgYellow('aaaa'))
cat(green('aaaa'))
cat(blue('aaaa'))
cat(cyan('aaaa'))
cat(yellow('aaaa'))
cat(magenta('aaaa'))
cat(crayon::bgMagenta('0'))
cat(crayon::italic('aaaa'))
cat(crayon::italic('library tidyverse'))
cat(crayon::italic('aa', "Ridson.."))
cat(cyan(italic(salam, "Ridson..\n")))
cat(yellow(italic(salam, "Ridson..\n")))
cat(cyan(italic(salam, "Ridson..\n")))
cat(cyan(italic(salam, "Ridson..\n")))
cat(green(italic(salam, "Ridson..\n")))
cat(lime(italic(salam, "Ridson..\n")))
cat(green(italic(salam, "Ridson..\n")))
cat(bgCyan(italic(salam, "Ridson..\n")))
cat(bgCyan(blue(italic(salam, "Ridson..\n"))))
cat(bgCyan(black(italic(salam, "Ridson..\n"))))
cat(bgCyan(bold(italic(salam, "Ridson..\n"))))
cat(bgCyan(bold(black(italic(salam, "Ridson..\n")))))
cat(crayon::blurred('asssss'))
cat(bold(cyan(italic(salam, "Ridson...\n"))))
cat("\nSelamat datang di R\n")
cat(bold("\nSelamat datang di R\n"))
cat(bold(cyan(italic(salam, "Ridson..."))))
cat(bold("\nSelamat datang di R\n"))
ivory <- make_style("ivory")
bgMaroon <- make_style("maroon", bg = TRUE)
fancy <- combine_styles(ivory, bgMaroon)
cat(fancy("This will have some fancy colors"), "\n")
ivory <- make_style("ivory")
bgMaroon <- make_style("lime", bg = TRUE)
fancy <- combine_styles(ivory, bgMaroon)
cat(fancy("This will have some fancy colors"), "\n")
ivory <- make_style("ivory")
bgMaroon <- make_style("#050", bg = TRUE)
fancy <- combine_styles(ivory, bgMaroon)
cat(fancy("This will have some fancy colors"), "\n")
ivory <- make_style("ivory")
bgMaroon <- make_style("050", bg = TRUE)
fancy <- combine_styles(ivory, bgMaroon)
cat(fancy("This will have some fancy colors"), "\n")
ivory <- make_style("ivory")
bgMaroon <- make_style(bg = TRUE, colors = '050')
fancy <- combine_styles(ivory, bgMaroon)
cat(fancy("This will have some fancy colors"), "\n")
?make_style()
ivory <- make_style("ivory")
bgMaroon <- make_style(rgb(0, 5, 0), bg = TRUE)
fancy <- combine_styles(ivory, bgMaroon)
cat(fancy("This will have some fancy colors"), "\n")
ivory <- make_style("ivory")
bgMaroon <- make_style(rgb(0, 5/255, 0), bg = TRUE)
fancy <- combine_styles(ivory, bgMaroon)
cat(fancy("This will have some fancy colors"), "\n")
ivory <- make_style("ivory")
bgMaroon <- make_style(rgb(94, 201, 98)/255, bg = TRUE)
fancy <- combine_styles(ivory, bgMaroon)
cat(fancy("This will have some fancy colors"), "\n")
ivory <- make_style("ivory")
bgMaroon <- make_style(rgb(94, 201, 98), bg = TRUE)
fancy <- combine_styles(ivory, bgMaroon)
cat(fancy("This will have some fancy colors"), "\n")
ivory <- make_style("ivory")
bgMaroon <- make_style(rgb(94, 201, 98, maxColorValue = 255), bg = TRUE)
fancy <- combine_styles(ivory, bgMaroon)
cat(fancy("This will have some fancy colors"), "\n")
ivory <- make_style("ivory")
bgMaroon <- make_style(rgb(94, 201, 98, maxColorValue = 255), bg = F)
fancy <- combine_styles(ivory, bgMaroon)
cat(fancy("This will have some fancy colors"), "\n")
ivory <- make_style("ivory")
bgMaroon <- make_style(rgb(33, 145, 140, maxColorValue = 255), bg = F)
fancy <- combine_styles(ivory, bgMaroon)
cat(fancy("This will have some fancy colors"), "\n")
lime <- make_style(rgb(94, 201, 98, maxColorValue = 255), bg = F)
cat(bold(lime(italic(salam, "Ridson..."))))
cat(italic('tidyverse v'))
cat(italic('tidyverse'), bold('v'))
tidyverse_conflicts()
tidyverse_logo()
tidyverse_packages()
tidyverse_sitrep()
tidyverse_deps()
tidyverse_packages()
tidyverse_sitrep()
cat(italic('tidyverse'), bold('v'))
cat(italic('tidyverse'), bold('sudah diload ya..'))
cat(italic('tidyverse'), ivory('sudah diload ya..'))
cat(yellow(italic('tidyverse')), ivory('sudah diload ya..'))
cat(magenta(italic('tidyverse')), ivory('sudah diload ya..'))
cat(cyan(italic('tidyverse')), ivory('sudah diload ya..'))
cat(lime(italic('tidyverse')), ivory('sudah diload ya..'))
tidyverse_conflicts()
cat(lime(italic('tidyverse')), ivory('load V'))
cat(lime(italic('tidyverse')), ivory('load sukse'))
cat(lime(italic('tidyverse')), ivory('load sukses'))
getwd()
cat(lime(italic('env')), ivory(getwd()))
cat(lime(italic('env       ')), ivory(getwd()))
cat(lime(italic('tidyverse')), ivory('load sukses'))
cat(lime(italic('env      ')), ivory(getwd()))
cat(lime(italic('tidyverse')), ivory('load sukses'))
cat(lime(italic('tidyverse :')), ivory('v'))
cat(lime(italic('env       :')), ivory(getwd()))
cat(lime(italic('tidyverse :')), ivory('oke'))
tidyverse_conflicts()
cat(tidyverse_conflicts())
interactive()
lime <- make_style(rgb(94, 201, 98, maxColorValue = 255), bg = F)
options(prompt = lime("~> "), show.signif.stars = F)
options(prompt = cyan("~> "), show.signif.stars = F)
options(prompt = lime("~> "), show.signif.stars = F)
# rm(salam, jam)
source('apa.R')
apa initFieldArgs()
source('awal.R')
